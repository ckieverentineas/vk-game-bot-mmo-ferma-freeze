generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  idvk            Int
  name            String
  lvl             Int        @default(1)
  xp              Float      @default(0)
  gold            Float      @default(350)
  crystal         Int        @default(0)
  energy          Float      @default(0)
  reputation      Float      @default(0)
  status          String     @default("player")
  limiter         Int        @default(0)
  id_corporation  Int        @default(0)
  crdate          DateTime   @default(now())
  update          DateTime   @default(now())
  Bulder          Builder[]
  Worker          Worker[]
  Trigger         Trigger[]
  Analyzer        Analyzer[]
}

model Builder {
  id      Int      @id @default(autoincrement())
  name    String
  lvl     Int      @default(1)
  type    String   @default("energy")
  income  Float    @default(1)
  cost    Float    @default(100)
  worker  Int      @default(1)
  id_user Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
model Corporation_Builder {
  id             Int         @id @default(autoincrement())
  name           String
  lvl            Int         @default(1)
  type           String
  income  Float    @default(1)
  cost    Float    @default(100)
  worker  Int      @default(1)
  id_corporation Int
  crdate         DateTime    @default(now())
  update         DateTime    @default(now())
  corporation    Corporation @relation(fields: [id_corporation], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Worker {
  id         Int      @id @default(autoincrement())
  name       String
  lvl        Int      @default(1)
  xp         Float    @default(0)
  income     Float    @default(0)
  speed      Float    @default(1)
  salary     Float    @default(1)
  gold       Float    @default(0)
  reputation Float    @default(0)
  point      Int      @default(0)
  id_user    Int
  id_builder Int?
  crdate     DateTime @default(now())
  update     DateTime @default(now())
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Corporation {
  id                  Int                   @id @default(autoincrement())
  id_user             Int
  name                String
  lvl                 Int                   @default(1)
  xp                  Float                 @default(0)
  gold                Float                 @default(1750)
  energy              Float                 @default(1750)
  reputation          Float                 @default(0)
  member              Int                   @default(6)
  crdate              DateTime              @default(now())
  update              DateTime              @default(now())
  Corporation_Builder Corporation_Builder[]
}



model Trigger {
  id      Int      @id @default(autoincrement())
  name    String
  value   Boolean  @default(false)
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}

model Analyzer {
  id        Int      @id @default(autoincrement())
  energy    Float    @default(0)
  gold      Float    @default(0)
  gold_from Float    @default(0)
  gold_to   Float    @default(0)
  xp        Float    @default(0)
  point     Int      @default(0)
  user      User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user   Int
  crdate    DateTime @default(now())
}
