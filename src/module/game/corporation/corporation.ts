import { User, Builder, Corporation } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";
import { Send_Message } from "../account/service";

const buildin: { [key: string]: { price: number, income: number, cost: number, koef_price: number, koef_income: number, type: string, smile: string, description: string } } = {
    "–û—Ñ–∏—Å": { price: 100, income: 5, cost: 100, koef_price: 1.3838, koef_income: 1.5, type: 'gold', smile: 'üí∞', description: "–û—Ñ–∏—Å —è–≤–ª—è–µ—Ç—Å—è —à—Ç–∞–±–æ–º –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ñ–∏—Å–∫–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å –≤ —à–µ–∫–µ–ª—è—Ö" },
    "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è": { price: 100, income: 5, cost: 100, koef_price: 1.3838, koef_income: 1.5, type: 'energy', smile: '‚ö°', description: "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –≤–∏–¥–µ —ç–Ω–µ—Ä–≥–∏–∏" }
}

export async function Main_Menu_Corporation(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const corporation: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏:\n\n`
    if (corporation) {
        const member_counter: number = await prisma.user.count({ where: { id_corporation: user.id_corporation} })
        const leader = await prisma.user.findFirst({ where: { id: corporation.id_user } })
        event_logger +=`üí¨ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${corporation.name}-${corporation.id}\nüåê –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: @id${leader?.idvk}(${leader?.name})\nüìà –£—Ä–æ–≤–µ–Ω—å: ${corporation.lvl}\nüìó –û–ø—ã—Ç: ${corporation.xp.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–∏: ${corporation.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${corporation.energy.toFixed(2)}\nü§ù –†–µ–ø—É—Ç–∞—Ü–∏—è: ${corporation.reputation.toFixed(2)}\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${member_counter}/${corporation.member}\n`;
        keyboard.callbackButton({ label: 'üèõ –ü–æ—Å—Ç—Ä–æ–π–∫–∏', payload: { command: 'builder_control_corporation', stat: "atk" }, color: 'secondary' })
        .callbackButton({ label: 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', payload: { command: 'member_control', stat: "health"  }, color: 'secondary' }).row()
    } else {
        keyboard//.callbackButton({ label: '‚ûï –û—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é', payload: { command: 'corporation_controller', command_sub: 'corporation_add' }, color: 'secondary' }).row()
        .callbackButton({ label: 'üîé –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫', payload: { command: 'corporation_controller', command_sub: 'corporation_finder' }, color: 'secondary' })
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞—Ç—å —Å–≤–æ—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏]`
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Corporation_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'corporation_add': Corporation_Add,
        'corporation_finder': Corporation_Finder, 
        'builder_config': Office_Config,
        'builder_destroy': Builder_Destroy,
        'builder_open': Office_Open
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Corporation_Add() { }
async function Corporation_Finder(context: Context, user: User, target: number) {
    //let attached = await Image_Random(context, "beer")
    const corporation_list: Corporation[] = await prisma.corporation.findMany({ orderBy: { id: "desc" } })
    const keyboard = new KeyboardBuilder()
    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: \n\n`
    const curva = context.eventPayload.office_current || 0
    const cur = context.eventPayload.target_current || 0
    if (context.eventPayload.selector || context.eventPayload.selector == 'zero') {
        const corporation_check: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(context.eventPayload.selector) } })
        if (!corporation_check) {
            await vk.api.messages.send({ peer_id: user.idvk, random_id: 0, message: `–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!` })
            return
        } else {
            const corporation_check_to: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user.id_corporation) } })
            console.log(corporation_check_to)
            if (!corporation_check_to && await prisma.user.count({ where: { id_corporation: corporation_check.id } }) < corporation_check.member ) {
                await prisma.$transaction([
                    prisma.user.update({ where: { id: user.id }, data: { id_corporation: corporation_check.id } }),
                    prisma.user.findFirst({ where: { id: corporation_check.id_user } })
                ]).then(([user_change_corp, owner]) => {
                    if (user_change_corp) {
                        event_logger += `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check.name}`
                        console.log(`${user.idvk} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check.name}`);
                        Send_Message(owner!.idvk, `@id${user.idvk}(${user.name}) –≤—Å—Ç—É–ø–∞–µ—Ç –∫ –≤–∞–º –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é!`)
                    }
                })
                .catch((error) => {
                    event_logger += `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`
                    console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                });
            } else {
                await vk.api.messages.send({ peer_id: user.idvk, random_id: 0, message: `–í –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏!` })
            }
        }
        //await context.send(`${event_logger}`)
    } else {
        if (corporation_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=cur; i < corporation_list.length && counter < limiter; i++) {
                const corpa = corporation_list[i]
                //console.log(`cur: ${cur} i: ${i} counter: ${counter} ${JSON.stringify(builder)}`)
                const member_checker: number = await prisma.user.count({ where: { id_corporation: corpa.id } })
                if (counter < limiter && member_checker < corpa.member && member_checker > 0) {
                    keyboard.callbackButton({ label: `‚úÖ ${member_checker}/${corpa.member}üë• ${corpa.name}-${corpa.id}`, payload: { command: 'corporation_controller', command_sub: 'corporation_finder', office_current: curva, target_current: cur, target: target, selector: corpa.id }, color: 'secondary' }).row()
                    event_logger += `üí¨ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${corpa.name}-${corpa.id}\n`;
                    counter++
                }
            }
            event_logger += `\n\n${corporation_list.length > 1 ? `~~~~ ${cur + corporation_list.length > cur+limiter ? limiter : limiter-(corporation_list.length-cur)} –∏–∑ ${corporation_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (corporation_list.length > limiter && cur > limiter-1) {
                keyboard.callbackButton({ label: '‚Üê', payload: { command: 'corporation_controller', command_sub: 'corporation_finder', office_current: curva, target_current: cur-limiter, target: target }, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (corporation_list.length > limiter && cur < corporation_list.length-1) {
                keyboard.callbackButton({ label: '‚Üí', payload: { command: 'corporation_controller', command_sub: 'corporation_finder', office_current: curva, target_current: cur+limiter, target: target }, color: 'secondary' })
            }
        } else {
            event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π...`
        }   
    }
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu_corporation', office_current: curva, target_current: cur, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Builder_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const builder: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —Å–Ω–µ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è...`
    if (builder) {
        if (context.eventPayload.status == "ok") {
            const sel = buildin[builder.name]
            const lvl_new = builder.lvl
            const price_return = sel.price*(lvl_new**sel.koef_price)
            await prisma.$transaction([
                prisma.builder.delete({ where: { id: builder.id } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { increment: price_return } } })
            ]).then(([builder_del, user_return]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ ${builder.name}-${builder.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'builder_controller', command_sub: 'builder_destroy', office_current: 0, target: builder.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Config(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å–æ–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Open(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥–ª—è–Ω—É—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}