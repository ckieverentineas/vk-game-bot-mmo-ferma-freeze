import { User } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";

export async function Member_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const member_list: any = await prisma.user.findMany({ where: { id_corporation: user.id_corporation }, include: { Bulder: true } })
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:\n\n`
    let cur = context.eventPayload.office_current ?? 0
    const member = member_list[cur]
    const corp = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
    const leader = await prisma.user.findFirst({ where: { id: corp?.id_user || 1 }})
    if (member_list.length > 0) {
        if (user.idvk == leader?.idvk) {
            keyboard.callbackButton({ label: 'üí• –£–≤–æ–ª–∏—Ç—å', payload: { command: 'member_controller', command_sub: 'member_destroy', office_current: cur, target: member.id }, color: 'secondary' }).row()
        }
        //.callbackButton({ label: 'üëÄ', payload: { command: 'worker_controller', command_sub: 'worker_open', office_current: i, target: worker.id }, color: 'secondary' }).row()
        event_logger += `üí¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫, ${member.name}:\nüí≥ UID: ${member.id}\nüé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${member.idvk}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${member.lvl}\nüìó –û–ø—ã—Ç: ${member.xp.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–∏: ${member.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${member.energy.toFixed(2)}\n\n`;
        for (const i in member.Bulder) {
            event_logger += `üèõ ${member.Bulder[i].name} üìà –£—Ä–æ–≤–µ–Ω—å: ${member.Bulder[i].lvl}\n`
        }
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –Ω–∞–Ω—è–ª–∏ —Ä–∞–±–æ—á–∏—Ö, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –∫–æ–≥–æ-—Ç–æ –Ω–∞–Ω—è—Ç—å?`
    }
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (member_list.length > 1 && cur > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'member_control', office_current: cur-1, target: member.id }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (member_list.length > 1 && cur < member_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'member_control', office_current: cur+1, target: member.id }, color: 'secondary' })
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu_corporation' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Member_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'member_destroy': Member_Destroy,
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Member_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const member: User | null = await prisma.user.findFirst({ where: { id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...`
    if (member) {
        if (context.eventPayload.status == "ok") {
            await prisma.$transaction([
                prisma.user.update({ where: { id: member.id }, data: { id_corporation: 0 } })
            ]).then(([builder_del]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${builder_del.name}-${builder_del.id}.\n` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${builder_del.name}-${builder_del.id}.\n`);
                vk.api.messages.send({ peer_id: builder_del.idvk, random_id: 0, message: `–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${user.name}!` })
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${member.name}-${member.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'member_controller', command_sub: 'member_destroy', office_current: 0, target: member.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}