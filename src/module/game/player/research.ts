import { Research, User } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";
import { builder_config, builder_config_list } from "../datacenter/builder_config";
import { icotransl_list } from "../datacenter/resources_translator";

export async function Research_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:\n\n`
    const cur = context.eventPayload.target_current || 0
    if (context.eventPayload.selector) {
        const research = await prisma.research.findFirst({ where: { id_user: user.id, name: context.eventPayload.selector } }) ? await prisma.research.findFirst({ where: { id_user: user.id, name: context.eventPayload.selector } }) : await prisma.research.create({ data: { id_user: user.id, name: context.eventPayload.selector, lvl: 10 } })
        if (research && user.research >= 1) {
            await prisma.$transaction([
                prisma.research.update({ where: { id: research.id }, data: { lvl: { increment: 1 } } }),
                prisma.user.update({ where: { id: user.id }, data: { research: { decrement: 1 } } })
            ]).then(([builder_new, user_up]) => {
                event_logger = `‚åõ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ${builder_new.name} —Å ${research.lvl} –¥–æ ${builder_new.lvl} —É—Ä–æ–≤–Ω—è.\n –û—Å—Ç–∞—Ç–æ–∫: ${user_up.research.toFixed(2)} ${icotransl_list['research'].smile}` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ${builder_new.name} —Å ${research.lvl} –¥–æ ${builder_new.lvl} —É—Ä–æ–≤–Ω—è.\n –û—Å—Ç–∞—Ç–æ–∫: ${user_up.research.toFixed(2)} ${icotransl_list['research'].smile}`)
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });

        } else {
            event_logger = `‚åõ –î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω—É–∂–Ω–æ ${icotransl_list['research']} –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è—Ö`
        }
    } else {
        const limiter = 5
        let counter = 0
        
        for (let i=cur; i < builder_config_list.length && counter < limiter; i++) {
            const builder = builder_config[builder_config_list[i]]
            keyboard.callbackButton({ label: `${icotransl_list['research'].smile} ${builder.name}`, payload: { command: 'research_control', selector: builder.name }, color: 'secondary' }).row()
            const research: Research | null = await prisma.research.findFirst({ where: { id_user: user.id, name: builder.name } })
            event_logger += `\n\nüí¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${builder.name}\n ${builder.description}\nüìù –£—Ä–æ–≤–µ–Ω—å: ${research?.lvl || 10 }`;
            counter++
        }
        event_logger += `\n\n${builder_config_list.length > 1 ? `~~~~ ${builder_config_list.length > limiter ? cur+limiter : limiter-(builder_config_list.length-cur)} –∏–∑ ${builder_config_list.length} ~~~~` : ''}`
        //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
        if (builder_config_list.length > limiter && cur > limiter-1) {
            keyboard.callbackButton({ label: '‚Üê', payload: { command: 'research_control', office_current: 0, target_current: cur-limiter }, color: 'secondary' })
        }
        //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
        if (builder_config_list.length > limiter && cur < builder_config_list.length-limiter) {
            keyboard.callbackButton({ label: '‚Üí', payload: { command: 'research_control', office_current: 0, target_current: cur+limiter }, color: 'secondary' })
        }
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu', office_current: 0 }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}