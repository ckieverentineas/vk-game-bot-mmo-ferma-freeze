import { User, Planet, System, Builder } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";
import { Fixed_Number_To_Five, Randomizer_Float } from "../service";
import { Time_Controller } from "../player/service3";
import { icotransl_list } from "../datacenter/resources_translator";
import { builder_config, builder_config_list } from "../datacenter/builder_config";

const buildin: { [key: string]: { price: number, koef_price: number, description: string } } = {
    "–ü–ª–∞–Ω–µ—Ç–∞": { price: 100000, koef_price: 3, description: "–ü–ª–∞–Ω–µ—Ç–∞ - –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –∏ –∏—Å—Ç–æ—â–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã" },
    "–ü–ª–∞–Ω–µ—Ç–∞ –ú–µ–≥–∞": { price: 10, koef_price: 1, description: "–ü–ª–∞–Ω–µ—Ç–∞ –ú–µ–≥–∞ - –æ–≥—Ä–æ–º–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –≤ –¥–∞–ª–µ–∫–∏—Ö —É–≥–æ–ª–∫–∞—Ö –≥–∞–ª–∞–∫—Ç–∏–∫–∏, –µ—â–µ –±–æ–ª—å—à–µ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö, –º–Ω–æ–≥–æ –ø–ª–æ—â–∞–¥–æ–∫" }
}

export async function Planet_Control_Multi(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const planet_list_get: Planet[] = await prisma.planet.findMany({ where: { id_user: user.id }, orderBy: { crdate: "asc" } })
    const planet_list: Planet[] = []
    for (const plan of planet_list_get) {
        const research: number = await prisma.builder.count({ where: { id_user: user.id, id_planet: plan.id } }) | 0
        if (plan.build > research) {
            planet_list.unshift(plan)
        } else {
            planet_list.push(plan)
        }
    }
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç–∞–º–∏:\n\n`
    let cur = await Fixed_Number_To_Five(context.eventPayload.current_object ?? 0)
    if (planet_list.length > 0) {
        const limiter = 5
        let counter = 0
        
        for (let i=cur; i < planet_list.length && counter < limiter; i++) {
            const planet = planet_list[i]
            //const services_ans = await Time_Controller(context, user, planet.id)
            const build_counter = await prisma.builder.count({ where: { id_planet: planet.id } })
            keyboard.callbackButton({ label: `üëÄ ${planet.name}-${planet.id}`, payload: { command: 'planet_control', id_planet: planet.id, current_object: i  }, color: 'secondary' }).row()
            // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ—Å–µ–ª–∏—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ
            const cities = await prisma.builder.findMany({ where: { id_user: user.id, id_planet: planet.id, name: "–ì–æ—Ä–æ–¥–∞" } })
            let worker_life_can = 0
            for (const city of cities) {
                worker_life_can += Math.floor(builder_config[city.name].storage!.worker.limit*((city.lvl)**builder_config[city.name].storage!.worker.koef_limit))
            }
            // c—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ –∂–∏–≤—É—Ç –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ
            const worker_life = await prisma.worker.count({ where: { id_planet: planet.id, id_user: user.id } })
            // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ 
            let worker_need = 0
            let worker_be = 0
            const builder_on_planet: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id, id_planet: planet.id } })
            for (const builderplan of builder_on_planet) {
                worker_need += Math.floor(builder_config[builderplan.name].require!.worker.limit*((builderplan.lvl)**builder_config[builderplan.name].require!.worker.koef))
                worker_be += await prisma.worker.count({ where: { id_builder: builderplan.id, id_user: user.id, id_planet: planet.id } })
            }
            event_logger +=`\nüí¨ –ü–ª–∞–Ω–µ—Ç–∞: ${planet.name}-${planet.id}\n‚öí –ó–¥–∞–Ω–∏–π: ${build_counter}/${planet.build}\nüè† –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${worker_life}/${worker_life_can}\nüë• –ù–∞ —Ä–∞–±–æ—Ç–µ: ${worker_be}/${worker_need}\n`;
            //event_logger += `\n${services_ans}`
            counter++
        }
        event_logger += `\n\n${planet_list.length > 1 ? `~~~~ ${planet_list.length > limiter ? cur+limiter : limiter-(planet_list.length-cur)} –∏–∑ ${planet_list.length} ~~~~` : ''}`
        //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
        if (planet_list.length > limiter && cur > limiter-1) {
            keyboard.callbackButton({ label: '‚Üê', payload: { command: 'planet_control_multi', current_object: cur-limiter }, color: 'secondary' })
        }
        //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
        if (planet_list.length > limiter && cur < planet_list.length-limiter) {
            keyboard.callbackButton({ label: '‚Üí', payload: { command: 'planet_control_multi', current_object: cur+limiter }, color: 'secondary' })
        }
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –ø–æ–∏–º–µ—Ç—å –∏—Ö??`
    }
    //–Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç
    keyboard.callbackButton({ label: `‚ûï`, payload: { command: 'planet_controller', command_sub: 'planet_add', current_object: cur }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Planet_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const planet_list_get: Planet[] = await prisma.planet.findMany({ where: { id_user: user.id }, orderBy: { crdate: "asc" } })
    const planet_list: Planet[] = []
    for (const plan of planet_list_get) {
        const research: number = await prisma.builder.count({ where: { id_user: user.id, id_planet: plan.id } }) | 0
        if (plan.build > research) {
            planet_list.unshift(plan)
        } else {
            planet_list.push(plan)
        }
    }
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç–∞–º–∏:\n\n`
    let cur = context.eventPayload.current_object ?? 0
    if (planet_list.length > 0) {
        const planet = planet_list[cur]
        const services_ans = await Time_Controller(context, user, planet.id)
		const build_counter = await prisma.builder.count({ where: { id_planet: planet.id } })
        keyboard.callbackButton({ label: `üèõ –ó–¥–∞–Ω–∏—è`, payload: { command: 'builder_control_multi', id_planet: planet.id }, color: 'secondary' }).row()
        .callbackButton({ label: `üë• –õ—é–¥–∏`, payload: { command: 'worker_control', id_object: planet.id }, color: 'secondary' }).row()
        .callbackButton({ label: `üìä –ó–∞—Å—Ç—Ä–æ–π–∫–∞`, payload: { command: 'planet_controller', command_sub: 'planet_info', id_planet: planet.id, current_object: cur }, color: 'secondary' }).row()
		//.callbackButton({ label: 'üí• –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å', payload: { command: 'planet_controller', command_sub: 'planet_destroy', id_object: planet.id }, color: 'secondary' })
        keyboard.callbackButton({ label: `‚ôª`, payload: { command: 'planet_control', current_object: cur, id_planet: planet.id }, color: 'secondary' }).row()
        
        // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ—Å–µ–ª–∏—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ
        const cities = await prisma.builder.findMany({ where: { id_user: user.id, id_planet: planet.id, name: "–ì–æ—Ä–æ–¥–∞" } })
        let worker_life_can = 0
        for (const city of cities) {
            worker_life_can += Math.floor(builder_config[city.name].storage!.worker.limit*((city.lvl)**builder_config[city.name].storage!.worker.koef_limit))
            
        }
        // c—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ –∂–∏–≤—É—Ç –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ
        const worker_life = await prisma.worker.count({ where: { id_planet: planet.id, id_user: user.id } })
        // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ 
        let worker_need = 0
        let worker_be = 0
        const builder_on_planet: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id, id_planet: planet.id } })
        for (const builderplan of builder_on_planet) {
            worker_need += Math.floor(builder_config[builderplan.name].require!.worker.limit*((builderplan.lvl)**builder_config[builderplan.name].require!.worker.koef))
            worker_be += await prisma.worker.count({ where: { id_builder: builderplan.id, id_user: user.id, id_planet: planet.id } })
        }
        event_logger +=`üí¨ –ü–ª–∞–Ω–µ—Ç–∞: ${planet.name}-${planet.id}\n‚öí –ó–¥–∞–Ω–∏–π: ${build_counter}/${planet.build}\n${icotransl_list['artefact'].smile} –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${planet.artefact.toFixed(2)}\n${icotransl_list['golden'].smile} –ó–æ–ª–æ—Ç–æ: ${planet.golden.toFixed(2)}\n${icotransl_list['iron'].smile} –ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞: ${planet.iron.toFixed(2)}\n${icotransl_list['coal'].smile} –£–≥–æ–ª—å: ${planet.coal.toFixed(2)}\n${icotransl_list['crystal_dirt'].smile} ${icotransl_list['crystal_dirt'].name}: ${planet.crystal.toFixed(2)}\n${icotransl_list['gas'].smile} ${icotransl_list['gas'].name}: ${planet.gas.toFixed(2)}\n${icotransl_list['oil'].smile} ${icotransl_list['oil'].name}: ${planet.oil.toFixed(2)}\n${icotransl_list['uranium'].smile} ${icotransl_list['uranium'].name}: ${planet.uranium.toFixed(2)}\nüè† –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${worker_life}/${worker_life_can}\nüë• –ù–∞ —Ä–∞–±–æ—Ç–µ: ${worker_be}/${worker_need}\n`;
        event_logger += `\n${services_ans}\n${planet_list.length > 1 ? `~~~~ ${1+cur} –∏–∑ ${planet_list.length} ~~~~` : ''}`
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –ø–æ–∏–º–µ—Ç—å –∏—Ö??`
    }
    
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—å–µ–∫—Ç
    if (planet_list.length > 1 && cur > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'planet_control', current_object: cur-1 }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ–±—å–µ–∫—Ç
    if (planet_list.length > 1 && cur < planet_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'planet_control', current_object: cur+1 }, color: 'secondary' })
    }
    if (planet_list.length > 5) {
        if ( cur < planet_list.length/2) {
            //–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—å–µ–∫—Ç
            keyboard.callbackButton({ label: '‚ÜíüïØ', payload: { command: 'planet_control', current_object: planet_list.length-1 }, color: 'secondary' })
        } else {
            //–ø–µ—Ä–≤—ã–π –æ–±—å–µ–∫—Ç
            keyboard.callbackButton({ label: '‚ÜêüïØ', payload: { command: 'planet_control', current_object: 0 }, color: 'secondary' })
        }
    }
    //–Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç
    //keyboard.callbackButton({ label: `‚ûï`, payload: { command: 'planet_controller', command_sub: 'planet_add' }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'planet_control_multi', current_object: cur }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Planet_Controller(context: Context, user: User) {
    const target = context.eventPayload.id_object ?? 0
    const config: Object_Controller = {
        'planet_add': Planet_Add,
        'planet_destroy': Planet_Destroy,
        'planet_info': Planet_Info
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Object_Controller = {
    [key: string]: (context: Context, user: User, target?: number) => Promise<void>;
}

async function Planet_Info(context: Context, user: User, ) {
    const keyboard = new KeyboardBuilder()
    let cur = context.eventPayload.current_object ?? 0
    let id_planet = context.eventPayload.id_planet ?? 0
    let event_logger = `‚ùÑ –ó–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ª–∞–Ω–µ—Ç—ã-${id_planet}:\n\n`
    for (const name of builder_config_list) {
        const counter = await prisma.builder.count({ where: { id_planet: id_planet, id_user: user.id, name: name } })
        event_logger += `üí¨ ${name}: ${counter}\n`
    }
    keyboard.callbackButton({ label: `‚ùå`, payload: { command: 'planet_control', current_object: cur }, color: 'secondary' }).row().inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
async function Planet_Usual(user: User, target: string) {
    const systema: System | null = await prisma.system.findFirst({ where: { id: 1 } })
    const planet_counter = await prisma.planet.count({ where: { id_user: user.id, name: target } })
    const sel = buildin[target]
    const price_new = sel.price*(planet_counter**sel.koef_price)
    let event_logger = ''
    if (user.energy >= price_new && user.energy > 0 && systema!.planet > 0) {
        await prisma.$transaction([
            prisma.planet.create({ data: { 
				id_user: user.id, id_system: 1, name: target, 
				coal: await Randomizer_Float(1000000, 1000000*2), 
				gas: await Randomizer_Float(50000, 50000*2), 
				oil: await Randomizer_Float(25000, 25000*2), 
				uranium: await Randomizer_Float(1000, 1000*2),
				iron: await Randomizer_Float(1000000, 1000000*2),
				golden: await Randomizer_Float(1000000, 1000000*2),
				artefact: Math.floor(await Randomizer_Float(100, 100*2)),
				crystal: Math.floor(await Randomizer_Float(0, 5))
			} }),
            prisma.user.update({ where: { id: user.id }, data: { energy: { decrement: price_new } } }),
			prisma.system.update({ where: { id: 1}, data: { planet: { decrement: 1 } } })
        ]).then(([builder_new, user_pay, sys]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–ª–∞–Ω–µ—Ç—ã ${builder_new.name}-${builder_new.id}.\nüè¶ –£ –≤–∞—Å –±—ã–ª–æ ${user.energy.toFixed(2)} —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–ª–µ—Ç—ã ${price_new.toFixed(2)}, –æ—Å—Ç–∞–ª–æ—Å—å: ${user_pay.energy.toFixed(2)}\n\n–í–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ ${sys.planet.toFixed(0)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–ª–∞–Ω–µ—Ç—ã ${builder_new.name}-${builder_new.id}.\nüè¶ –£ –≤–∞—Å –±—ã–ª–æ ${user.energy.toFixed(2)} —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–ª–µ—Ç—ã ${price_new.toFixed(2)}, –æ—Å—Ç–∞–ª–æ—Å—å: ${user_pay.energy.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    } else {
        event_logger = `‚åõ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(price_new-user.energy).toFixed(2)} —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–∞–Ω–µ—Ç—ã.`
    }
    return event_logger
}
async function Planet_Mega(user: User, target: string) {
    const systema: System | null = await prisma.system.findFirst({ where: { id: 1 } })
    const planet_counter = await prisma.planet.count({ where: { id_user: user.id, name: target } })
    const sel = buildin[target]
    const price_new = sel.price*(planet_counter**sel.koef_price)+10
    let event_logger = ''
    const mulmin = 5
    const mulmax = 3
    if (user.crystal >= price_new && user.crystal > 0 && systema!.planet > 0) {
        await prisma.$transaction([
            prisma.planet.create({ data: { 
				id_user: user.id, id_system: 1, name: target, 
				coal: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax), 
				gas: await Randomizer_Float(50000*mulmin, 50000*mulmin*mulmax), 
				oil: await Randomizer_Float(25000*mulmin, 25000*mulmin*mulmax), 
				uranium: await Randomizer_Float(1000*mulmin, 1000*mulmin*mulmax),
				iron: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax),
				golden: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax),
				artefact: Math.floor(await Randomizer_Float(100*mulmin, 100*mulmin*mulmax)),
				crystal: Math.floor(await Randomizer_Float(1, 25)),
                build: 15
			} }),
            prisma.user.update({ where: { id: user.id }, data: { crystal: { decrement: price_new } } }),
			prisma.system.update({ where: { id: 1}, data: { planet: { decrement: 1 } } })
        ]).then(([builder_new, user_pay, sys]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–ª–∞–Ω–µ—Ç—ã ${builder_new.name}-${builder_new.id}.\nüè¶ –£ –≤–∞—Å –±—ã–ª–æ ${user.crystal} –∫–∞—Ä–∞—Ç, –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –¥–∞–ª—å–Ω–∏–µ –ø–µ—Ä–µ–ª–µ—Ç—ã ${price_new.toFixed(2)}, –æ—Å—Ç–∞–ª–æ—Å—å: ${user_pay.crystal.toFixed(2)}\n\n–í–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ ${sys.planet.toFixed(0)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø–ª–∞–Ω–µ—Ç—ã ${builder_new.name}-${builder_new.id}.\nüè¶ –£ –≤–∞—Å –±—ã–ª–æ ${user.crystal} –∫–∞—Ä–∞—Ç, –∑–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –¥–∞–ª—å–Ω–∏–µ –ø–µ—Ä–µ–ª–µ—Ç—ã ${price_new.toFixed(2)}, –æ—Å—Ç–∞–ª–æ—Å—å: ${user_pay.crystal.toFixed(2)}\n\n–í–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ ${sys.planet.toFixed(0)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    } else {
        event_logger = `‚åõ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(price_new-user.crystal).toFixed(2)} –∫–∞—Ä–∞—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–∞–Ω–µ—Ç—ã.`
    }
    return event_logger
}
type Planet_Selector = {
    [key: string]: (user: User, target: string) => Promise<string>;
}
async function Planet_Add(context: Context, user: User, ) {
    const keyboard = new KeyboardBuilder()
    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n`
	const systema: System | null = await prisma.system.findFirst({ where: { id: 1 } }) ? await prisma.system.findFirst({ where: { id: 1 } }) : await prisma.system.create({ data: { name: "–ê–ª—å—Ç–µ—Ä–∞", planet: Math.floor(await Randomizer_Float(1000000000000000000000000, 5000000000000000000000000)) } })
    console.log(`–í–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π ${systema!.name} –æ—Å—Ç–∞–ª–æ—Å—å ${systema!.planet.toFixed(0)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç`)
    if (context.eventPayload.selector) {
        const config: Planet_Selector = {
            '–ü–ª–∞–Ω–µ—Ç–∞': Planet_Usual,
            '–ü–ª–∞–Ω–µ—Ç–∞ –ú–µ–≥–∞': Planet_Mega,
        }
        event_logger += await config[context.eventPayload.selector](user, context.eventPayload.selector)
    } else {
        for (const builder of ['–ü–ª–∞–Ω–µ—Ç–∞', '–ü–ª–∞–Ω–µ—Ç–∞ –ú–µ–≥–∞']) {
            const sel = buildin[builder]
            const planet_counter = await prisma.planet.count({ where: { id_user: user.id, name: builder } })
            const price_new = sel.price*(planet_counter**sel.koef_price)+10
            keyboard.callbackButton({ label: `‚ûï ${builder}`, payload: { command: 'planet_controller', command_sub: 'planet_add', current_object: 0, selector: builder }, color: 'secondary' }).row()
            event_logger += `\n\nüí¨ –ü–ª–∞–Ω–µ—Ç–∞: ${builder}\n ${sel.description}`;
            event_logger += builder == '–ü–ª–∞–Ω–µ—Ç–∞' ? `\n‚öô –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${price_new}/${user.energy.toFixed(2)}${icotransl_list['energy'].smile}` : ''
            event_logger += builder == '–ü–ª–∞–Ω–µ—Ç–∞ –ú–µ–≥–∞' ? `\n‚öô –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${price_new}/${user.crystal}${icotransl_list['crystal'].smile}` : ''
        }
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'planet_control', current_object: 0 }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Planet_Destroy(context: Context, user: User, target?: number) {
    const keyboard = new KeyboardBuilder()
    const planet: Planet | null = await prisma.planet.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —Å–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω–µ—Ç—É...`
    if (planet) {
        if (context.eventPayload.status == "ok") {
            await prisma.$transaction([
                prisma.planet.delete({ where: { id: planet.id } }),
            ]).then(([builder_del]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º –ø–ª–∞–Ω–µ—Ç—ã ${builder_del.name}-${builder_del.id}.\n` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º –ø–ª–∞–Ω–µ—Ç—ã ${builder_del.name}-${builder_del.id}.`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ ${planet.name}-${planet.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'planet_controller', command_sub: 'planet_destroy', id_object: planet.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'planet_control' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
