import { User, Builder, Trigger } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";

export async function Income_Control(context: Context, user: User) {
    const builders: Builder[] | null = await prisma.builder.findMany({ where: { id_user: user.id } })
    const keyboard = new KeyboardBuilder()
    const datenow: Date = new Date()
    let event_logger = `–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±—ã–≤–∞–µ—Ç—Å—è`
    const trigger: Trigger | null = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'income' } })
    if (!trigger) { 
        await prisma.trigger.create({ data: { id_user: user.id, name: 'income', value: false } })
        console.log(`Init income for user ${context.peerId}`)
        event_logger = `–ë–∏–∑–Ω–µ—Å –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞–±–æ—á–∏–µ –Ω–∞ –Ω–∏—Ö!`
    }
    if (trigger) {
        let income = 0
        for (const builder of builders) {
            let income_find = builder.income
            for (const worker of await prisma.worker.findMany({ where: { id_builder: builder.id } })) {
                income_find += worker.income
                income_find *= worker.speed
            }
            income += income_find
        }
        const dateold: Date = new Date(trigger.update)
        const koef: number = (Number(datenow) - Number(dateold))/3600000
        await prisma.$transaction([
            prisma.trigger.update({ where: { id: trigger.id }, data: { update: datenow } }),
            prisma.user.update({ where: { id: user.id }, data: { energy: { increment: income*koef } } })
        ]).then(([, user_income]) => {
            event_logger = `‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${koef.toFixed(2)} —á–∞—Å–æ–≤, –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ ${(income*koef).toFixed(2)}‚ö°\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.energy.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_income.energy.toFixed(2)}` 
            console.log(`‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ ${user.idvk} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${koef.toFixed(2)} —á–∞—Å–æ–≤, –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ ${(income*koef).toFixed(2)}\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.energy.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_income.energy.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∏–±—ã–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    const trigger_worker: Trigger | null = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'worker' } })
    if (!trigger_worker) { 
        await prisma.trigger.create({ data: { id_user: user.id, name: 'worker', value: false } })
        console.log(`Init worker for user ${context.peerId}`)
    }
    const timer_week = 1000000000
    const koef_week = Number(datenow) - Number(trigger_worker?.update)
    if (trigger_worker && koef_week >= timer_week ) {
        await prisma.$transaction([
            prisma.trigger.update({ where: { id: trigger_worker.id }, data: { update: datenow } }),
            prisma.worker.updateMany({ where: { id_user: user.id }, data: { point: { increment: Math.floor(koef_week/timer_week) } } })
        ]).then(() => {
            event_logger += `‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${(koef_week/timer_week).toFixed(2)} –Ω–µ–¥–µ–ª—å, –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ ${Math.floor(koef_week/timer_week)} –æ—á–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è` 
            console.log(`‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ ${user.idvk} –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${(koef_week/timer_week).toFixed(2)} –Ω–µ–¥–µ–ª—å, –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ ${Math.floor(koef_week/timer_week)} –æ—á–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è`);
        })
        .catch((error) => {
            event_logger += `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ —Ä–∞–±–æ—á–∏—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    keyboard.callbackButton({ label: '–û–ö', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Exchange_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    let event_logger = '–î–ª—è –æ–±–º–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —à–µ–∫–µ–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —ç–Ω–µ—Ä–≥–∏–∏'
    if (user.energy >= 10) {
        await prisma.$transaction([
            prisma.user.update({ where: { id: user.id }, data: { energy: { decrement: user.energy }, gold: { increment: user.energy/10 } } })
        ]).then(([user_up]) => {
            event_logger = `‚åõ –ù–∞ –±–∏—Ä–∂–µ –≤—ã –æ–±–º–µ–Ω—è–ª–∏ ${user.energy.toFixed(2)}‚ö° –Ω–∞ ${(user.energy/10).toFixed(2)} —à–µ–∫–µ–ª–µ–π\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_up.gold.toFixed(2)}` 
            console.log(`‚åõ –ù–∞ –±–∏—Ä–∂–µ ${user.idvk} –æ–±–º–µ–Ω—è–ª ${user.energy.toFixed(2)}‚ö° –Ω–∞ ${(user.gold/10).toFixed(2)} —à–µ–∫–µ–ª–µ–π\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_up.gold.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —à–µ–∫–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    keyboard.callbackButton({ label: '–û–ö', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}