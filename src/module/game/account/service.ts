import { User, Builder, Trigger, Analyzer } from "@prisma/client"
import { Context, Keyboard, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";

export function Sleep(ms: number) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
export async function Send_Message(idvk: number, message: string, keyboard: Keyboard) {
    message = message ? message : 'invalid message'
    try {
        keyboard ? await vk.api.messages.send({ peer_id: idvk, random_id: 0, message: `${message}`, keyboard: keyboard } ) : await vk.api.messages.send({ peer_id: idvk, random_id: 0, message: `${message}` } )
    } catch (e) {
        console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e}`)
    }
}
export async function Income_Control(context: Context, user: User) {
    const builders: Builder[] | null = await prisma.builder.findMany({ where: { id_user: user.id } })
    const keyboard = new KeyboardBuilder()
    const datenow: Date = new Date()
    let event_logger = `–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±—ã–≤–∞–µ—Ç—Å—è`
    const trigger: Trigger | null = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'income' } })
    if (!trigger) { 
        await prisma.trigger.create({ data: { id_user: user.id, name: 'income', value: false } })
        console.log(`Init income for user ${context.peerId}`)
        event_logger = `–ë–∏–∑–Ω–µ—Å –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞–±–æ—á–∏–µ –Ω–∞ –Ω–∏—Ö!`
    }
    if (trigger) {
        let income_energy = 0
        let income_gold = 0
        for (const builder of builders) {
            income_gold += builder.type == "gold" ? builder.income : 0
            income_energy += builder.type == "energy" ? builder.income : 0
            for (const worker of await prisma.worker.findMany({ where: { id_builder: builder.id } })) {
                income_gold += builder.type == "gold" ? worker.income : 0
                income_energy += builder.type == "energy" ? worker.income : 0
                income_gold *= builder.type == "gold" ? worker.speed : 1
                income_energy *= builder.type == "energy" ? worker.speed : 1
            }
        }
        const dateold: Date = new Date(trigger.update)
        const koef: number = (Number(datenow) - Number(dateold))/3600000
        let analyzer: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user.id } })
        if (!analyzer) { analyzer = await prisma.analyzer.create({ data: { id_user: user.id } }) }
        await prisma.$transaction([
            prisma.trigger.update({ where: { id: trigger.id }, data: { update: datenow } }),
            prisma.user.update({ where: { id: user.id }, data: { energy: { increment: income_energy*koef }, gold: { increment: income_gold*koef } } }),
            prisma.analyzer.update({ where: { id: analyzer.id }, data: { energy: { increment: income_energy*koef }, gold: { increment: income_gold*koef } } })
        ]).then(([, user_income]) => {
            event_logger = `‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${koef.toFixed(2)} —á–∞—Å–æ–≤, –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞:\n\n‚ö° –≠–Ω–µ—Ä–≥–∏–∏: ${(income_energy*koef).toFixed(2)}, ${user.energy.toFixed(2)} --> ${user_income.energy.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–µ–π: ${(income_gold*koef).toFixed(2)}, ${user.gold.toFixed(2)} --> ${user_income.gold.toFixed(2)}` 
            console.log(`‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ ${user.idvk} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${koef.toFixed(2)} —á–∞—Å–æ–≤, –ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞:\n\n‚ö° –≠–Ω–µ—Ä–≥–∏–∏:${(income_energy*koef).toFixed(2)}, ${user.energy.toFixed(2)} --> ${user_income.energy.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–µ–π:${(income_gold*koef).toFixed(2)}, ${user.gold.toFixed(2)} --> ${user_income.gold.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∏–±—ã–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    const trigger_worker: Trigger | null = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'worker' } })
    if (!trigger_worker) { 
        await prisma.trigger.create({ data: { id_user: user.id, name: 'worker', value: false } })
        console.log(`Init worker for user ${context.peerId}`)
    }
    const timer_week = 100000000
    const koef_week = Number(datenow) - Number(trigger_worker?.update)
    if (trigger_worker && koef_week >= timer_week ) {
        let analyzer: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user.id } })
        if (!analyzer) { analyzer = await prisma.analyzer.create({ data: { id_user: user.id } }) }
        await prisma.$transaction([
            prisma.trigger.update({ where: { id: trigger_worker.id }, data: { update: datenow } }),
            prisma.worker.updateMany({ where: { id_user: user.id }, data: { point: { increment: Math.floor(koef_week/timer_week) } } }),
            prisma.analyzer.update({ where: { id: analyzer.id }, data: { point: { increment: Math.floor(koef_week/timer_week) } } })
        ]).then(() => {
            event_logger += `\n\n‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${(koef_week/timer_week).toFixed(2)} –¥–Ω–µ–π, –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ ${Math.floor(koef_week/timer_week)} –æ—á–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è` 
            console.log(`‚åõ –†–∞–±–æ—Ç–Ω–∏–∫–∏ ${user.idvk} –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ:\nüè¶ –ó–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ${(koef_week/timer_week).toFixed(2)} –¥–Ω–µ–π, –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ ${Math.floor(koef_week/timer_week)} –æ—á–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è`);
        })
        .catch((error) => {
            event_logger += `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ —Ä–∞–±–æ—á–∏—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    keyboard.callbackButton({ label: '–û–ö', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Exchange_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const course = 1 + Math.random()
    let event_logger = `–î–ª—è –æ–±–º–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —à–µ–∫–µ–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${course.toFixed(2)} —ç–Ω–µ—Ä–≥–∏–∏`
    
    if (user.energy >= course) {
        let analyzer: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user.id } })
        if (!analyzer) { analyzer = await prisma.analyzer.create({ data: { id_user: user.id } }) }
        await prisma.$transaction([
            prisma.user.update({ where: { id: user.id }, data: { energy: { decrement: user.energy }, gold: { increment: user.energy/course } } }),
            prisma.analyzer.update({ where: { id: analyzer.id }, data: { gold: { increment: user.energy/course } } })
        ]).then(([user_up]) => {
            event_logger = `‚åõ –ù–∞ –±–∏—Ä–∂–µ –≤—ã –æ–±–º–µ–Ω—è–ª–∏ ${user.energy.toFixed(2)}‚ö° –Ω–∞ ${(user.energy/course).toFixed(2)} —à–µ–∫–µ–ª–µ–π –ø–æ –∫—É—Ä—Å—É ${course.toFixed(2)}\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_up.gold.toFixed(2)}` 
            console.log(`‚åõ –ù–∞ –±–∏—Ä–∂–µ ${user.idvk} –æ–±–º–µ–Ω—è–ª ${user.energy.toFixed(2)}‚ö° –Ω–∞ ${(user.gold/course).toFixed(2)} —à–µ–∫–µ–ª–µ–π\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user_up.gold.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —à–µ–∫–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    keyboard.callbackButton({ label: '–û–ö', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}