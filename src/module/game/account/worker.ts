import { Builder, User, Worker } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";
import Generator_Nickname from "../../fab/generator_name";
import { Rand_Int } from "../../fab/random";

function Finder_Builder(builder_list: Builder[], worker: Worker) {
    for (let i=0; i < builder_list.length; i++) {
        if (worker.id_builder == builder_list[i].id) {
            
            return builder_list[i]
        }
    }
    return null
}
export async function Worker_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const worker_list: Worker[] = await prisma.worker.findMany({ where: { id_user: user.id } })
    const builder_list: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id } })
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤:\n\n`
    let cur = context.eventPayload.office_current ?? 0
    const worker = worker_list[cur]
    if (worker_list.length > 0) {
        let builder: Builder | null = Finder_Builder(builder_list, worker)
        keyboard.callbackButton({ label: 'üéì –û–±—É—á–∏—Ç—å', payload: { command: 'worker_controller', command_sub: 'worker_upgrade', office_current: cur, target: worker.id  }, color: 'secondary' }).row()
        .callbackButton({ label: 'üë£ –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', payload: { command: 'worker_controller', command_sub: 'worker_target', office_current: cur, target: worker.id }, color: 'secondary' }).row()
        .callbackButton({ label: 'üí• –£–≤–æ–ª–∏—Ç—å', payload: { command: 'worker_controller', command_sub: 'worker_destroy', office_current: cur, target: worker.id }, color: 'secondary' }).row()
        //.callbackButton({ label: 'üëÄ', payload: { command: 'worker_controller', command_sub: 'worker_open', office_current: i, target: worker.id }, color: 'secondary' }).row()
        event_logger +=`üí¨ –†–∞–±–æ—Ç–Ω–∏–∫: ${worker.name}-${worker.id}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${worker.lvl}\nüìó –û–ø—ã—Ç: ${worker.xp.toFixed(2)}\n‚ö° –ü—Ä–∏–±—ã–ª—å: ${worker.income.toFixed(2)}\nüß≠ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: ${worker.speed.toFixed(2)}\nü§ë –ó–∞—Ä–ø–ª–∞—Ç–∞: ${worker.salary.toFixed(2)}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${worker.gold.toFixed(2)}\nü§ù –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –±–æ—Å—Å—É: ${worker.reputation.toFixed(2)}\n‚≠ê –û—á–∫–∏ –æ–±—É—á–µ–Ω–∏—è: ${worker.point}\nüë£ –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: ${builder ? `${builder.name}-${builder.id}` : `–§—Ä–∏–ª–∞–Ω—Å`}\n`;
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –Ω–∞–Ω—è–ª–∏ —Ä–∞–±–æ—á–∏—Ö, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –∫–æ–≥–æ-—Ç–æ –Ω–∞–Ω—è—Ç—å?`
    }
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (worker_list.length > 1 && cur > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'worker_control', office_current: cur-1, target: worker.id }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (worker_list.length > 1 && cur < worker_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'worker_control', office_current: cur+1, target: worker.id }, color: 'secondary' })
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    const worker_check: number = await prisma.worker.count({ where: { id_user: user.id }})
    const prices = (worker_check+1)*50 >= 500 ? 500 : (worker_check+1)*50
    keyboard.callbackButton({ label: `‚ûï${prices}üí∞`, payload: { command: 'worker_controller', command_sub: 'worker_add' }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Worker_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'worker_add': Worker_Add,
        'worker_upgrade': Worker_Upgrade, 
        'worker_target': Worker_Target,
        'worker_config': Worker_Config,
        'worker_destroy': Worker_Destroy,
        'worker_open': Worker_Open
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Worker_Target(context: Context, user: User, target: number) {
    //let attached = await Image_Random(context, "beer")
    const builder_list: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id } })
    const keyboard = new KeyboardBuilder()
    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: \n\n`
    
    if (context.eventPayload.selector || context.eventPayload.selector == 'zero') {
        //const worker_checker: number = await prisma.worker.count({ where: { id_builder: context.eventPayload.selector | 0 } })
        const id_build = context.eventPayload.selector == 'zero' ? 0 : context.eventPayload.selector
        const worker_checker: number = await prisma.worker.count({ where: { id_builder: id_build } })
        const builder = await prisma.builder.findFirst({ where: { id: id_build }})
        if (worker_checker < builder!.worker) {
            await prisma.$transaction([
                prisma.worker.update({ where: { id: target }, data: { id_builder: id_build } }),
                
            ]).then(([worker_upd]) => {
                event_logger = `‚åõ –†–∞–±–æ—á–∏–π ${worker_upd.name}-${worker_upd.id} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç ${context.eventPayload.selector == 'zero' ? '–Ω–∞ –§—Ä–∏–ª–∞–Ω—Å–µ' : `–≤ –∑–¥–∞–Ω–∏–∏ ${builder?.name}-${builder?.id}`}.\n` 
                console.log(`‚åõ –†–∞–±–æ—á–∏–π –∏–≥—Ä–æ–∫–∞ ${user.idvk} ${worker_upd.name}-${worker_upd.id} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∑–¥–∞–Ω–∏–∏ ${builder?.name}-${builder?.id}.`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger += `–í –∑–¥–∞–Ω–∏–∏ ${builder!.name}-${builder!.id} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ${worker_checker}/${builder!.worker}üë• —Ä–∞–±–æ—á–∏—Ö!`
        }
        
    } else {
        if (builder_list.length > 0) {
            for (const builder of builder_list) {
                const worker_checker: number = await prisma.worker.count({ where: { id_builder: builder.id } })
                keyboard.callbackButton({ label: `‚úÖ ${worker_checker}/${builder.worker}üë• ${builder.name}-${builder.id}`, payload: { command: 'worker_controller', command_sub: 'worker_target', office_current: 0, target: target, selector: builder.id }, color: 'secondary' }).row()
                event_logger += `üí¨ –ó–¥–∞–Ω–∏–µ: ${builder.name}-${builder.id}\n`;
            }
            keyboard.callbackButton({ label: `‚ùå –§—Ä–∏–ª–∞–Ω—Å`, payload: { command: 'worker_controller', command_sub: 'worker_target', office_current: 0, target: target, selector: 'zero' }, color: 'secondary' })
        } else {
            event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π...`
        }
        
    }

    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'worker_control', office_current: 0, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Worker_Add(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const worker_check: number = await prisma.worker.count({ where: { id_user: user.id }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∫–æ–≥–æ –Ω–∞–Ω–∏–º–∞—Ç—å...`
    const prices = (worker_check+1)*50 >= 500 ? 500 : (worker_check+1)*50
    if (user.gold >= prices) {
        await prisma.$transaction([
            prisma.worker.create({ data: { id_user: user.id, name: await Generator_Nickname() } }),
            prisma.user.update({ where: { id: user.id }, data: { gold: { decrement: prices } } })
        ]).then(([worker_new, user_pay]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–∞–Ω–∏–º–∞–Ω–∏–µ–º ${worker_new.name}-${worker_new.id}.\nüè¶ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${prices.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –Ω–∞–Ω–∏–º–∞–Ω–∏–µ–º ${worker_new.name}-${worker_new.id}.\nüè¶ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${prices.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–Ω–∏–º–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    } else {
        const worker_check: number = await prisma.worker.count({ where: { id_user: user.id }})
        const prices = (worker_check+1)*50 >= 500 ? 500 : (worker_check+1)*50
        event_logger = `‚åõ –ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(prices-user.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π –¥–ª—è –Ω–∞–Ω–∏–º–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞.`
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'worker_control', office_current: 0, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Worker_Upgrade(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const worker: Worker | null = await prisma.worker.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—á—É—é —Å–∏–ª—É –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å...`
    if (worker && worker.point > 0) {
        const selector = await Rand_Int(2)

        const speed_new = selector == 0 ? 0.01 : 0
        const income_new = selector == 1 ? 0.1 : 0
        await prisma.$transaction([
            prisma.worker.update({ where: { id: worker.id }, data: { income: { increment: income_new }, speed: { increment: speed_new }, point: { decrement: 1 } } }),
            prisma.user.update({ where: { id: user.id }, data: { xp: { increment: Math.random() } } })
        ]).then(([worker_up, user_up]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ ${worker_up.name}-${worker_up.id}, ${selector == 0 ? `—Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ —Å ${worker.speed} –¥–æ ${worker_up.speed}` : `–ø—Ä–∏–±—ã–ª—å –ø–æ–≤—ã—à–µ–Ω–∞ —Å ${worker.income.toFixed(2)} –¥–æ ${worker_up.income.toFixed(2)}`}.\nüè¶ –í–∞—à –æ–ø—ã—Ç –≤—ã—Ä–æ—Å —Å ${user.xp.toFixed(2)} –¥–æ ${user_up.xp.toFixed(2)}` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ ${worker_up.name}-${worker_up.id}, ${selector == 0 ? `—Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ —Å ${worker.speed} –¥–æ ${worker_up.speed}` : `–ø—Ä–∏–±—ã–ª—å –ø–æ–≤—ã—à–µ–Ω–∞ —Å ${worker.income.toFixed(2)} –¥–æ ${worker_up.income.toFixed(2)}`}.\nüè¶ –ï–≥–æ/–µ–µ –æ–ø—ã—Ç –≤—ã—Ä–æ—Å —Å ${user.xp.toFixed(2)} –¥–æ ${user_up.xp.toFixed(2)}`);
            //keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: context.eventPayload.office_current, target: office_upgrade.id }, color: 'secondary' })
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    } else {
        event_logger += `\n –£ —Ä–∞–±–æ—á–µ–≥–æ ${worker?.name} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è. –û—á–∫–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∫–∞–∂–¥–æ–º—É —Ä–∞–±–æ—á–µ–º—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –ü—Ä–∏–±—ã–ª–∏.`
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'worker_control', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Worker_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const worker: Worker | null = await prisma.worker.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∫–æ–≥–æ —É–≤–æ–ª–∏—Ç—å...`
    if (worker) {
        if (context.eventPayload.status == "ok") {
            const worker_check: number = await prisma.worker.count({ where: { id_user: user.id }})
            const price_return = (worker_check)*50 >= 500 ? 500 : (worker_check)*50
            await prisma.$transaction([
                prisma.worker.delete({ where: { id: worker.id } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { increment: price_return } } })
            ]).then(([worker_del, user_return]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ${worker_del.name}-${worker_del.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ${worker_del.name}-${worker_del.id}.\nüí≥ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–æ–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ ${worker.name}-${worker.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'worker_controller', command_sub: 'worker_destroy', office_current: 0, target: worker.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Worker_Config(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å–æ–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Worker_Open(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥–ª—è–Ω—É—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}