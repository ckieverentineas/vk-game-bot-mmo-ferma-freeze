import { Corporation, User } from "@prisma/client";
import { vk } from "../../../";
import { Context, KeyboardBuilder } from "vk-io";
import prisma from "../../prisma";

export async function User_Menu_Show(context: Context, user: User) {
	const keyboard = new KeyboardBuilder()
	const corp: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
    let event_logger = `üí¨ –í–∞—à –±–∏–∑–Ω–µ—Å, ${user.name}:\nüí≥ UID: ${user.id}\nüé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk}\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : corp?.name}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüìó –û–ø—ã—Ç: ${user.xp.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}`
    keyboard.callbackButton({ label: 'üèõ –ó–¥–∞–Ω–∏—è', payload: { command: 'builder_control', stat: "atk" }, color: 'secondary' })
    .callbackButton({ label: 'üë• –õ—é–¥–∏', payload: { command: 'worker_control', stat: "health"  }, color: 'secondary' }).row()
	.callbackButton({ label: 'üìà –ü—Ä–∏–±—ã–ª—å', payload: { command: 'income_control', stat: "health"  }, color: 'secondary' })
	.callbackButton({ label: 'üí∞>‚ö°–ë–∏—Ä–∂–∞', payload: { command: 'exchange_control', stat: "health"  }, color: 'secondary' }).row()
	.callbackButton({ label: 'üåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', payload: { command: 'main_menu_corporation', stat: "health"  }, color: 'secondary' })
    .callbackButton({ label: '‚ùå', payload: { command: 'main_menu_close', stat: "mana" }, color: 'secondary' }).inline().oneTime() 
	await context.send(`${event_logger}`, { keyboard: keyboard } );
	/*await context.send(`‚åõ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–∞—è, –Ω–æ –≤—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞ –∑–∞–≤–æ–¥–µ, –≤–ª–∞–¥–µ—Ç–µ –∑–∞–≤–æ–¥–æ–º.`,
		{ 	
			keyboard: Keyboard.builder()
			.callbackButton({ label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–∑–Ω–µ—Å', payload: { command: 'main_menu', security: `${user.idvk}${user.name}` }, color: 'positive' }).oneTime().inline()
		}
	);*/
}

export async function Main_Menu(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    let event_logger = `üí¨ –í–∞—à –±–∏–∑–Ω–µ—Å, ${user.name}:\nüí≥ UID: ${user.id}\nüé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk}\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : '–ö–æ—Ä–ø–∞'}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüìó –û–ø—ã—Ç: ${user.xp.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}`
    keyboard.callbackButton({ label: 'üèõ –ó–¥–∞–Ω–∏—è', payload: { command: 'builder_control', stat: "atk" }, color: 'secondary' })
    .callbackButton({ label: 'üë• –õ—é–¥–∏', payload: { command: 'worker_control', stat: "health"  }, color: 'secondary' }).row()
	.callbackButton({ label: 'üìà –ü—Ä–∏–±—ã–ª—å', payload: { command: 'income_control', stat: "health"  }, color: 'secondary' })
	.callbackButton({ label: '‚ö°>üí∞–ë–∏—Ä–∂–∞', payload: { command: 'exchange_control', stat: "health"  }, color: 'secondary' }).row()
	.callbackButton({ label: 'üåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', payload: { command: 'main_menu_corporation', stat: "health"  }, color: 'secondary' })
    .callbackButton({ label: '‚ùå', payload: { command: 'main_menu_close', stat: "mana" }, color: 'secondary' }).inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
export async function Main_Menu_Close(context: Context, user: User) {
	await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚ùÑ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, ${user.name}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ [–∫–ª–∞–≤–∞] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫`, /*, attachment: attached.toString()*/ })
}