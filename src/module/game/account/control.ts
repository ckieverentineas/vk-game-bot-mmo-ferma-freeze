import { User } from "@prisma/client";
import { vk } from "../../../";
import prisma from "../../prisma";
import { Context, Keyboard, KeyboardBuilder } from "vk-io";

export async function User_Menu_Show(context: Context, user: User) {
    const datenow: any = new Date()
	const dateold: any = user.update
	if (datenow - dateold > 1000) {
		await context.send(`‚åõ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–∞—è, –Ω–æ –≤—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞ –∑–∞–≤–æ–¥–µ, –≤–ª–∞–¥–µ—Ç–µ –∑–∞–≤–æ–¥–æ–º.`,
			{ 	
				keyboard: Keyboard.builder()
				.callbackButton({ label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–∑–Ω–µ—Å', payload: { command: 'user_info', security: `${user.idvk}${user.name}` }, color: 'positive' }).oneTime().inline()
			}
		);
		await prisma.antiflud.upsert({ create: { id_user: user.id, id_message: '0', date_message: new Date(), busy: false}, update: { id_message: '0', date_message: new Date(), busy: false}, where: { id_user: user.id} })
		await prisma.user.update({ where: { id: user.id}, data: { update: datenow } })
	} else {
		await context.send(`üîî –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤: ${dateold.getDate()}-${dateold.getMonth()}-${dateold.getFullYear()} ${dateold.getHours()}:${dateold.getMinutes()}!\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ ${((86400000-(datenow-dateold))/60000/60).toFixed(2)} —á–∞—Å–æ–≤.`)
	}
}

export async function User_Info(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    let event_logger = `üí¨ –í–∞—à –±–∏–∑–Ω–µ—Å, ${user.name}:\nüí≥ UID: ${user.id}\nüé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüìó –û–ø—ã—Ç: ${user.xp}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy}`
    keyboard.callbackButton({ label: '–û—Ñ–∏—Å', payload: { command: 'user_add_stat', stat: "atk" }, color: 'secondary' })
    .callbackButton({ label: '–§–∞–±—Ä–∏–∫–∏', payload: { command: 'user_add_stat', stat: "health"  }, color: 'secondary' }).row()
    .callbackButton({ label: '–†–∞–±–æ—á–∏–µ', payload: { command: 'user_add_stat', stat: "mana" }, color: 'secondary' }).inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}