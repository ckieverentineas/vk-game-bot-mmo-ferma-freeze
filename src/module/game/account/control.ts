import { Builder, Corporation, User } from "@prisma/client";
import { vk } from "../../../";
import { Context, KeyboardBuilder } from "vk-io";
import prisma from "../../prisma";
import { icotransl_list } from "../datacenter/resources_translator";
import { builder_config } from "../datacenter/builder_config";

async function User_Info(user: User) {
	const corp: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
	const cities = await prisma.builder.findMany({ where: { id_user: user.id, name: "–ì–æ—Ä–æ–¥–∞" } })
	let worker_life_can = 0
    for (const city of cities) {
        worker_life_can += Math.floor(builder_config[city.name].storage!.worker.limit*((city.lvl)**builder_config[city.name].storage!.worker.koef_limit))
        
    }
    // c—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ –∂–∏–≤—É—Ç –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ
    const worker_life = await prisma.worker.count({ where: { id_user: user.id } })
    // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ 
    let worker_need = 0
    let worker_be = 0
    const builder_on_planet: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id } })
    for (const builderplan of builder_on_planet) {
        worker_need += Math.floor(builder_config[builderplan.name].require!.worker.limit*((builderplan.lvl)**builder_config[builderplan.name].require!.worker.koef))
        worker_be += await prisma.worker.count({ where: { id_builder: builderplan.id, id_user: user.id } })
    }
    let event_logger = `üí¨ –í–∞—à –±–∏–∑–Ω–µ—Å, ${user.name}:\nüí≥ UID: ${user.id}\nüé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk}\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : corp?.name}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüìó –û–ø—ã—Ç: ${user.xp.toFixed(2)}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n${icotransl_list['metal'].smile} ${icotransl_list['metal'].name}: ${user.iron.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}\n${icotransl_list['research'].smile} –û—á–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ${user.research.toFixed(2)}\nüíé –ö–∞—Ä–∞—Ç—ã: ${user.crystal}\n\nüè† –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${worker_life}/${worker_life_can}\nüë• –ù–∞ —Ä–∞–±–æ—Ç–µ: ${worker_be}/${worker_need}\n`
	const keyboard = new KeyboardBuilder()
	keyboard.callbackButton({ label: 'üåé –ü–ª–∞–Ω–µ—Ç—ã', payload: { command: 'planet_control' }, color: 'secondary' }).row()
	.callbackButton({ label: 'üåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', payload: { command: 'main_menu_corporation' }, color: 'secondary' }).row()
	.callbackButton({ label: 'üß™ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', payload: { command: 'research_control' }, color: 'secondary' }).row()
	.urlButton({ label: 'üçª –û–± –∏–≥—Ä–µ', url: 'https://vk.com/@ferma_bot1-dobro-pozhalovat-v-mmo-ekonomicheskuu-biznes-strategiu' }).row()
	//.callbackButton({ label: 'üìà –ü—Ä–∏–±—ã–ª—å', payload: { command: 'income_control', stat: "health"  }, color: 'secondary' })
	//.callbackButton({ label: 'üí∞>‚ö°–ë–∏—Ä–∂–∞', payload: { command: 'exchange_control', stat: "health"  }, color: 'secondary' }).row()
	.callbackButton({ label: '‚ùå', payload: { command: 'main_menu_close' }, color: 'secondary' }).inline().oneTime() 
	return [keyboard, event_logger]
}
export async function User_Menu_Show(context: Context, user: User) {
	const [keyboard, event_logger] = await User_Info(user)
	await context.send(`${event_logger}`, { keyboard: keyboard } );
	/*await context.send(`‚åõ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–∞—è, –Ω–æ –≤—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞ –∑–∞–≤–æ–¥–µ, –≤–ª–∞–¥–µ—Ç–µ –∑–∞–≤–æ–¥–æ–º.`,
		{ 	
			keyboard: Keyboard.builder()
			.callbackButton({ label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–∑–Ω–µ—Å', payload: { command: 'main_menu', security: `${user.idvk}${user.name}` }, color: 'positive' }).oneTime().inline()
		}
	);*/
}

export async function Main_Menu(context: Context, user: User) {
	const [keyboard, event_logger] = await User_Info(user)
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
export async function Main_Menu_Close(context: Context, user: User) {
	const keyboard = new KeyboardBuilder()
	keyboard.textButton({ label: '–ö–õ–ê–í–ê', payload: { command: 'planet_control', stat: "health"  }, color: 'secondary' }).row().inline().oneTime() 
	await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚ùÑ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, ${user.name}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ [–∫–ª–∞–≤–∞] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}