import { Office, User } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../../";
import prisma from "../../prisma";

export async function Office(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const office: Office[] = await prisma.office.findMany({ where: { id_user: user.id }, include: { Factory: true } })
    let event_logger = ``
    let i = context.eventPayload.office_current ?? 0
    if (office.length > 0) {
        event_logger = `üí¨ –í–∞—à –æ—Ñ–∏—Å, ${office[i].id}:\nüìà –£—Ä–æ–≤–µ–Ω—å: ${office[i].lvl}\nüìó –û–ø—ã—Ç: ${office[i].xp.toFixed(2)}`
        keyboard.callbackButton({ label: 'üîß', payload: { command: 'office_controller', command_sub: 'office_upgrade', office_current: i, target: office[i].id  }, color: 'secondary' })
        .callbackButton({ label: '‚öô', payload: { command: 'office_controller', command_sub: 'office_config', office_current: i, target: office[i].id }, color: 'secondary' })
        .callbackButton({ label: 'üî•', payload: { command: 'office_controller', command_sub: 'office_destroy', office_current: i, target: office[i].id }, color: 'secondary' })
        .callbackButton({ label: 'üëÄ', payload: { command: 'office_controller', command_sub: 'office_open', office_current: i, target: office[i].id }, color: 'secondary' }).row()
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ—Ñ–∏—Å, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–µ –¥–µ–ª–æ –≤–ø–µ—Ä–≤—ã–µ?`
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    if (office.length == 0 || user.gold >= Math.sqrt(office.length*1000000+100)) {
        keyboard.callbackButton({ label: '‚ûï', payload: { command: 'office_controller', command_sub: 'office_add', office_current: i, target: office[i]?.id ?? 0 }, color: 'secondary' })
    }
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (office.length > 1 && i > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'office', office_current: i-1, target: office[i].id }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (office.length > 1 && i < office.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'office', office_current: i+1, target: office[i].id }, color: 'secondary' })
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'user_info', office_current: i, target: office[i]?.id ?? 0 }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Office_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'office_add': Office_Add,
        'office_upgrade': Office_Upgrade, 
        'office_config': Office_Config,
        'office_destroy': Office_Destroy,
        'office_open': Office_Open
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Office_Add(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office_counter: number = await prisma.office.count({ where: { id_user: user.id }})
    const price = Math.sqrt(office_counter*1000000+100)
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã–π –æ—Ñ–∏—Å –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏...`
    if (user.gold >= price) {
        await prisma.$transaction([
            prisma.office.create({ data: { id_user: user.id } }),
            prisma.user.update({ where: { id: user.id }, data: { gold: user.gold - price }})
        ]).then(([office_new, user_pay]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_new.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, —Å–Ω—è—Ç–æ ${price.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}üí∞` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_new.id}.\nüí≥ –ù–∞ –µ–≥–æ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, —Å–Ω—è—Ç–æ ${price.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}üí∞`);
            keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: office_counter, target: office_new.id }, color: 'secondary' })
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –æ—Ñ–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: 0, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Upgrade(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Office | null = await prisma.office.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å...`
    if (office) {
        const price = Math.sqrt(office.xp*1000000+100)
        
        if (office.xp >= price) {
            await prisma.$transaction([
                prisma.office.update({ where: { id: office.id }, data: { xp: office.xp - price, lvl: { increment: 1 } } }),
            ]).then(([office_upgrade]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_upgrade.id} —Å ${office.lvl} –Ω–∞ ${office_upgrade.lvl}.\nüè¶ –ù–∞ –µ–≥–æ —Å—á–µ—Ç–µ –±—ã–ª–æ ${office.xp.toFixed(2)} XP, —Å–Ω—è—Ç–æ ${price.toFixed(2)} –æ–ø—ã—Ç–∞, –æ—Å—Ç–∞—Ç–æ–∫: ${office_upgrade.xp.toFixed(2)}üìó` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_upgrade.id} —Å ${office.lvl} –Ω–∞ ${office_upgrade.lvl}.\nüè¶ –ù–∞ –µ–≥–æ —Å—á–µ—Ç–µ –±—ã–ª–æ ${office.xp.toFixed(2)} XP, —Å–Ω—è—Ç–æ ${price.toFixed(2)} –æ–ø—ã—Ç–∞, –æ—Å—Ç–∞—Ç–æ–∫: ${office_upgrade.xp.toFixed(2)}üìó`);
                keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: context.eventPayload.office_current, target: office_upgrade.id }, color: 'secondary' })
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –æ—Ñ–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        }
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office_counter: number = await prisma.office.count({ where: { id_user: user.id }})
    const price = Math.sqrt((office_counter)*1000000+100)*1.0
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã–π –æ—Ñ–∏—Å –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏...`
    if (office_counter > 0) {
        await prisma.$transaction([
            prisma.office.delete({ where: { id: target } }),
            prisma.user.update({ where: { id: user.id }, data: { gold: user.gold + price }})
        ]).then(([office_new, user_pay]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_new.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}üí∞` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ ${office_new.id}.\nüí≥ –ù–∞ –µ–≥–æ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}üí∞`);
            keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: office_counter > 1 ? office_counter-2 : 0, target: undefined }, color: 'secondary' })
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Ñ–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Config(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Office | null = await prisma.office.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å–æ–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Open(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Office | null = await prisma.office.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥–ª—è–Ω—É—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}