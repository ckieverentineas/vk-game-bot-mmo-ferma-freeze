import { User, Builder } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";

export async function Builder_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const builder_list: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id } })
    let event_logger = ``
    let i = context.eventPayload.office_current ?? 0
    if (builder_list.length > 0) {
        event_logger += builder_list.map(builder => {
            keyboard.callbackButton({ label: `üí¨ ${builder.name}-${builder.id}`, payload: { command: 'builder_control' }, color: 'secondary' }).row()
            .callbackButton({ label: '–£–ª—É—á—à–∏—Ç—å', payload: { command: 'builder_controller', command_sub: 'builder_upgrade', office_current: i, target: builder.id  }, color: 'secondary' }).row()
            .callbackButton({ label: '–†–∞–∑—Ä—É—à–∏—Ç—å', payload: { command: 'builder_controller', command_sub: 'builder_destroy', office_current: i, target: builder.id }, color: 'secondary' }).row()
            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
            return `üí¨ –ó–¥–∞–Ω–∏–µ: ${builder.name}-${builder.id}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${builder.lvl}\nüìó –û–ø—ã—Ç: ${builder.xp.toFixed(2)}\nüí∞ –í–ª–æ–∂–µ–Ω–æ: ${builder.cost.toFixed(2)}\n‚ö° –ü—Ä–∏–±—ã–ª—å: ${builder.income.toFixed(2)}\nüë• –†–∞–±–æ—á–∏—Ö: ${builder.worker}\n‚öí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${builder.count}\n`;
        }).join('\n');
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ—Ñ–∏—Å, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–µ –¥–µ–ª–æ –≤–ø–µ—Ä–≤—ã–µ?`
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    if (builder_list.length == 0) {
        keyboard.callbackButton({ label: '‚ûï', payload: { command: 'builder_controller', command_sub: 'builder_add' }, color: 'secondary' })
    }
    /*
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && i > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'office', office_current: i-1, target: office[i].id }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && i < builder_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'office', office_current: i+1, target: office[i].id }, color: 'secondary' })
    }
    */
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Builder_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'builder_add': Builder_Add,
        'builder_upgrade': Builder_Upgrade, 
        'builder_config': Office_Config,
        'builder_destroy': Builder_Destroy,
        'builder_open': Office_Open
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Builder_Add(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office_check: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, name: "–û—Ñ–∏—Å" }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏...`
    const prices = 100
    if (!office_check && user.gold >= prices) {
        await prisma.$transaction([
            prisma.builder.create({ data: { id_user: user.id, name: "–û—Ñ–∏—Å" } }),
            prisma.user.update({ where: { id: user.id }, data: { gold: { decrement: prices } } })
        ]).then(([builder_new, user_pay]) => {
            event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º ${builder_new.name}-${builder_new.id}.\nüè¶ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${prices.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}` 
            console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º ${builder_new.name}-${builder_new.id}.\nüè¶ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${prices.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}`);
        })
        .catch((error) => {
            event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
            console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
        });
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'builder_control', office_current: 0, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Builder_Upgrade(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const builder: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å...`
    if (builder) {
        const lvl_new = builder.lvl+1
        const price_new = 102.5616*(lvl_new**1.3838)
        const worker_new = lvl_new/2 >= 1 ? Math.floor(lvl_new/2) : 1
        const income_new = 5*(lvl_new**1.5)
        if (user.gold >= price_new) {
            await prisma.$transaction([
                prisma.builder.update({ where: { id: builder.id }, data: { lvl: lvl_new, worker: worker_new, income: income_new, cost: { increment: price_new } } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { decrement: price_new } } })
            ]).then(([builder_up, user_up]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è –∑–¥–∞–Ω–∏—è ${builder_up.name}-${builder_up.id} —Å ${builder.lvl} –Ω–∞ ${builder_up.lvl}.\nüè¶ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_up.gold.toFixed(2)}` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_up.name}-${builder_up.id} —Å ${builder.lvl} –Ω–∞ ${builder_up.lvl}.\nüè¶ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_up.gold.toFixed(2)}`);
                //keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: context.eventPayload.office_current, target: office_upgrade.id }, color: 'secondary' })
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger += `\n –ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(price_new-user.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π.`
        }
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'builder_control', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Builder_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const builder: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —Å–Ω–µ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è...`
    if (builder) {
        if (context.eventPayload.status == "ok") {
            const price_return = 37.7385*(2.6158**builder.lvl)
            await prisma.$transaction([
                prisma.builder.delete({ where: { id: builder.id } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { increment: price_return } } })
            ]).then(([builder_del, user_return]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ ${builder.name}-${builder.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'builder_controller', command_sub: 'builder_destroy', office_current: 0, target: builder.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Config(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å–æ–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Open(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥–ª—è–Ω—É—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}