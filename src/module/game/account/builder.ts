import { User, Builder } from "@prisma/client"
import { Context, KeyboardBuilder } from "vk-io"
import { vk } from "../../..";
import prisma from "../../prisma";

const buildin: { [key: string]: { price: number, income: number, cost: number, koef_price: number, koef_income: number, type: string, smile: string, description: string } } = {
    "–û—Ñ–∏—Å": { price: 100, income: 5, cost: 100, koef_price: 1.3838, koef_income: 1.5, type: 'gold', smile: 'üí∞', description: "–û—Ñ–∏—Å —è–≤–ª—è–µ—Ç—Å—è —à—Ç–∞–±–æ–º –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ñ–∏—Å–∫–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å –≤ —à–µ–∫–µ–ª—è—Ö" },
    "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è": { price: 100, income: 5, cost: 100, koef_price: 1.3838, koef_income: 1.5, type: 'energy', smile: '‚ö°', description: "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –≤–∏–¥–µ —ç–Ω–µ—Ä–≥–∏–∏" }
}

export async function Builder_Control(context: Context, user: User) {
    const keyboard = new KeyboardBuilder()
    const builder_list: Builder[] = await prisma.builder.findMany({ where: { id_user: user.id } })
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è–º–∏:\n\n`
    let cur = context.eventPayload.office_current ?? 0
    const builder = builder_list[cur]
    if (builder_list.length > 0) {
        const sel = buildin[builder.name]
        const lvl_new = builder.lvl+1
        const price_new = sel.price*(lvl_new**sel.koef_price)
        keyboard.callbackButton({ label: `üîß ${price_new.toFixed(2)}üí∞`, payload: { command: 'builder_controller', command_sub: 'builder_upgrade', office_current: cur, target: builder.id  }, color: 'secondary' }).row()
        .callbackButton({ label: 'üí• –†–∞–∑—Ä—É—à–∏—Ç—å', payload: { command: 'builder_controller', command_sub: 'builder_destroy', office_current: cur, target: builder.id }, color: 'secondary' }).row()
        //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
        event_logger +=`üí¨ –ó–¥–∞–Ω–∏–µ: ${builder.name}-${builder.id}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${builder.lvl}\nüìó –û–ø—ã—Ç: ${builder.xp.toFixed(2)}\nüí∞ –í–ª–æ–∂–µ–Ω–æ: ${builder.cost.toFixed(2)}\n${buildin[builder.name].smile} –ü—Ä–∏–±—ã–ª—å: ${builder.income.toFixed(2)}\nüë• –†–∞–±–æ—á–∏—Ö: ${builder.worker}\n‚öí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${builder.count}\n\n${builder_list.length > 1 ? `~~~~ ${1+cur} –∏–∑ ${builder_list.length} ~~~~` : ''}`;
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
    }
    
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && cur > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'builder_control', office_current: cur-1, target: builder.id }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && cur < builder_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'builder_control', office_current: cur+1, target: builder.id }, color: 'secondary' })
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    keyboard.callbackButton({ label: '‚ûï', payload: { command: 'builder_controller', command_sub: 'builder_add' }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'main_menu' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Builder_Controller(context: Context, user: User) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'builder_add': Builder_Add,
        'builder_upgrade': Builder_Upgrade, 
        'builder_config': Office_Config,
        'builder_destroy': Builder_Destroy,
        'builder_open': Office_Open
    }
    await config[context.eventPayload.command_sub](context, user, target)
}

type Office_Controller = {
    [key: string]: (context: Context, user: User, target: number) => Promise<void>;
}

async function Builder_Add(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏:\n\n`
    if (context.eventPayload.selector) {
        const sel = buildin[context.eventPayload.selector]
        const lvl_new = 1
        const price_new = sel.price*(lvl_new**sel.koef_price)
        const worker_new = lvl_new/10 >= 1 ? Math.floor(lvl_new/10) : 1
        const income_new = sel.income*(lvl_new**sel.koef_income)
        if (user.gold >= price_new) {
            await prisma.$transaction([
                prisma.builder.create({ data: { id_user: user.id, name: context.eventPayload.selector, income: income_new, worker: worker_new, cost: price_new, type: sel.type } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { decrement: price_new } } })
            ]).then(([builder_new, user_pay]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º ${builder_new.name}-${builder_new.id}.\nüè¶ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏–µ–º ${builder_new.name}-${builder_new.id}.\nüè¶ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_pay.gold.toFixed(2)}`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `‚åõ –ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(price_new-user.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è.`
        }
    } else {
        for (const builder of ['–û—Ñ–∏—Å', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è']) {
            const sel = buildin[builder]
            const lvl_new = 1
            const price_new = sel.price*(lvl_new**sel.koef_price)
            keyboard.callbackButton({ label: `‚ûï ${builder} ${price_new}üí∞`, payload: { command: 'builder_controller', command_sub: 'builder_add', office_current: 0, target: target, selector: builder }, color: 'secondary' }).row()
            event_logger += `\n\nüí¨ –ó–¥–∞–Ω–∏–µ: ${builder}\n${buildin[builder].smile} –ü—Ä–∏–±—ã–ª—å: ${sel.income.toFixed(2)} –≤ —á–∞—Å\n ${sel.description}`;
        }
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'builder_control', office_current: 0, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Builder_Upgrade(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const builder: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å...`
    let cur = context.eventPayload.office_current ?? 0
    if (builder) {
        const sel = buildin[builder.name]
        const lvl_new = builder.lvl+1
        const price_new = sel.price*(lvl_new**sel.koef_price)
        const worker_new = lvl_new/10 >= 1 ? Math.floor(lvl_new/10) : 1
        const income_new = sel.income*(lvl_new**sel.koef_income)
        if (context.eventPayload.status == "ok") {
            if (user.gold >= price_new) {
                await prisma.$transaction([
                    prisma.builder.update({ where: { id: builder.id }, data: { lvl: lvl_new, worker: worker_new, income: income_new, cost: { increment: price_new } } }),
                    prisma.user.update({ where: { id: user.id }, data: { gold: { decrement: price_new } } })
                ]).then(([builder_up, user_up]) => {
                    event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è –∑–¥–∞–Ω–∏—è ${builder_up.name}-${builder_up.id} —Å ${builder.lvl} –Ω–∞ ${builder_up.lvl}.\nüè¶ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_up.gold.toFixed(2)}` 
                    console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_up.name}-${builder_up.id} —Å ${builder.lvl} –Ω–∞ ${builder_up.lvl}.\nüè¶ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)} —à–µ–∫–µ–ª–µ–π, —Å–Ω—è—Ç–æ ${price_new.toFixed(2)}, –æ—Å—Ç–∞—Ç–æ–∫: ${user_up.gold.toFixed(2)}`);
                    //keyboard.callbackButton({ label: 'üëÄ', payload: { command: 'office', office_current: context.eventPayload.office_current, target: office_upgrade.id }, color: 'secondary' })
                })
                .catch((error) => {
                    event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                    console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                });
            } else {
                event_logger += `\n –ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç ${(price_new-user.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π.`
            }
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ ${builder.name}-${builder.id} –∑–∞ ${price_new.toFixed(2)} –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ ${user.gold.toFixed(2)}üí∞?\n\n –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ä–∞—Å—Ç—É—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n${buildin[builder.name].smile} –ü—Ä–∏–±—ã–ª—å: ${builder.income.toFixed(2)} --> ${income_new.toFixed(2)}\nüë• –†–∞–±–æ—á–∏—Ö: ${builder.worker} --> ${worker_new}\n`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'builder_controller', command_sub: 'builder_upgrade', office_current: cur, target: builder.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'builder_control', office_current: cur, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Builder_Destroy(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const builder: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —Å–Ω–µ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è...`
    if (builder) {
        if (context.eventPayload.status == "ok") {
            const sel = buildin[builder.name]
            const lvl_new = builder.lvl
            const price_return = sel.price*(lvl_new**sel.koef_price)
            await prisma.$transaction([
                prisma.builder.delete({ where: { id: builder.id } }),
                prisma.user.update({ where: { id: user.id }, data: { gold: { increment: price_return } } })
            ]).then(([builder_del, user_return]) => {
                event_logger = `‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞` 
                console.log(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ${user.idvk} —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è ${builder_del.name}-${builder_del.id}.\nüí≥ –ù–∞ –µ–≥–æ/–µ–µ —Å—á–µ—Ç–µ –±—ã–ª–æ ${user.gold.toFixed(2)}‚Ç™, –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${price_return.toFixed(2)} —à–µ–∫–µ–ª–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: ${user_return.gold.toFixed(2)}üí∞`);
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
            });
        } else {
            event_logger = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–µ—Å—Ç–∏ ${builder.name}-${builder.id}?`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'builder_controller', command_sub: 'builder_destroy', office_current: 0, target: builder.id, status: "ok" }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'builder_control', office_current: 0, target: undefined }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Config(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–∏—Å–æ–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

async function Office_Open(context: Context, user: User, target: number) {
    const keyboard = new KeyboardBuilder()
    const office: Builder | null = await prisma.builder.findFirst({ where: { id_user: user.id, id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—Ñ–∏—Å –Ω–µ–ª—å–∑—è –∑–∞–≥–ª—è–Ω—É—Ç—å...`
    if (office) {
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'office', office_current: context.eventPayload.office_current, target: target }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}