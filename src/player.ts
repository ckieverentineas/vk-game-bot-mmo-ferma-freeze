import { HearManager } from "@vk-io/hear";
import { root, vk } from "./index";
import { IQuestionMessageContext } from "vk-io-question";
import prisma from "./module/prisma";
import { Analyzer, User } from "@prisma/client";


export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (context.senderId == root) {
            await context.sendDocuments({ value: `./prisma/dev.db`, filename: `dev.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
            await vk.api.messages.send({
                peer_id: root,
                random_id: 0,
                message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`
            })
        }
    })
    hearManager.hear(/—Å—Ç–∞—Ç–∞|–°—Ç–∞—Ç–∞/gm, async (context: any) => {
        let users = '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–æ–±—ã—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏\n\n'
        let counter = 1
        let user_me = null
        for (const user of await prisma.analyzer.findMany({ orderBy: { energy: 'desc' }, include: { user: true } })) {
            if (counter <= 10) {
                users += `${counter} - ${user.user.name.slice(0, 20)} --> ${user.energy.toFixed(2)}‚ö°\n`
            }
            if (user.user.idvk == context.senderId) { user_me = `\n${counter} - @id${user.user.idvk}(${user.user.name.slice(0, 20)}) --> ${user.energy.toFixed(2)}‚ö°`}
            counter++
        }
        /*const text = [
            { idvk: 1, id: 1, text: "–ì", white: " " },
            { idvk: 12, id: 1, text: "–ì–ò", white: " " },
            { idvk: 123, id: 1, text: "–ì–ò–õ", white: " " },
            { idvk: 1234, id: 1, text: "–ì–ò–õ–¨", white: " " },
            { idvk: 12345, id: 1, text: "–ì–ò–õ–¨–î", white: " " },
            { idvk: 123456, id: 1, text: "–ì–ò–õ–¨–î–ò", white: " " },
            { idvk: 1234567, id: 1, text: "–ì–ò–õ–¨–î–ò–Ø", white: " " }
        ]
        let res = []
        //const speca = ["·Ö†", " ", " ", "„ÄÄ", " ", " ", "", "‚ÄÉ"]
        const speca = ["„Ö§"]
        for (const j in speca) {
            for (const i in text) {
                const calc = text[i].text.length < 8 ? 8-text[i].text.length : 0
                const data = `${i}.${(text[i].text).slice(-8)}${text[i].white.repeat(calc)+text[i].white.repeat(3)}${String(text[i].idvk)}üéñ`
                res.push({ test: data.replace(/ /g, `${speca[j]}`)})
            }
            res.push({ test: speca[j] })
        }
        await context.send(res.map((item: { test: any; }) => {return item.test;}).join("\r\n"))
        //console.log(res.map((item: { test: any; }) => {return item.test;}).join("\r\n"))*/
        users += user_me
        await context.send(`${users}`)
    })
    hearManager.hear(/–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–û—Å–º–æ—Ç—Ä–µ—Ç—å/gm, async (context: any) => {
        if (context.forwards[0].senderId) {
            const user = await prisma.user.findFirst({ where: { idvk: context.forwards[0].senderId } })
            if (user) {
                await context.send(`üí¨ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –±–∏–∑–Ω–µ—Å, ${user.name}:\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corportation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : '–ö–æ—Ä–ø–∞'}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}`)
            }
        }
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/–ø–æ–º–æ—â—å|–ü–æ–º–æ—â—å/gm, async (context: any) => {
        await context.send(`üí¨ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n~ [–æ—Å–º–æ—Ç—Ä–µ—Ç—å] -> –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ\n~ [–ø–µ—Ä–µ–¥–∞—Ç—å —Ö —à–µ–∫–µ–ª–µ–π] -> –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–µ—Å–µ–¥—ã, –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É —à–µ–∫–µ–ª–∏, –≥–¥–µ —Ö - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–∫–µ–ª–µ–π, —á—Ç–æ —Å–ø–∏—à—É—Ç—Å—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞\n~ [—Å—Ç–∞—Ç–∞] -> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ –ø–æ –¥–æ–±—ã—á–µ —ç–Ω–µ—Ä–≥–∏–∏`)
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/!cmd/gm, async (context: any) => {
        // !cmd increment gold 19319319
        //   0    1         2     3
        if (context.forwards[0].senderId && root == context.senderId && context.text.split(' ').length == 4) {
            const user: User | null = await prisma.user.findFirst({ where: { idvk: context.forwards[0].senderId } })
            const [cmd, action, field, value] = context.text.split(' ');
            const operation_list = ['increment', 'decrement']
            const target_list = ['gold', 'energy']
            let updateData: any = {};
            if (operation_list.includes(action) && target_list.includes(field) && parseFloat(value) > 0) {
                if (action === "increment") {
                    updateData[field] = {
                      increment: parseFloat(value),
                    };
                  } else {
                    updateData[field] = {
                      decrement: parseFloat(value),
                    };
                  }
                await prisma.$transaction([
                    prisma.user.update({ where: { id: user?.id }, data: updateData })
                ]).then(([user_update]) => {
                    console.log(`üîß ${cmd} ${field} ${action} ${value} for ${user_update.idvk}`);
                    context.send(`üîß ${cmd} ${field} ${action} ${value} OK`)
                    vk.api.messages.send({ peer_id: user_update.idvk, random_id: 0, message: `üîß ${cmd} ${field} ${action} ${value}` })
                })
                .catch((error) => {
                    context.send(`üîß ${cmd} ${field} ${action} ${value} error`)
                    console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                });
            } else {
                await context.send(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∫–æ–º–∏–ª—è—Ç–æ—Ä –≤–ª–æ–º –ø–∏—Å–∞—Ç—å`)
            }
        } else {
            await context.send(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∫–æ–º–∏–ª—è—Ç–æ—Ä –≤–ª–æ–º –ø–∏—Å–∞—Ç—å`)
        }
    })
    hearManager.hear(/–ø–µ—Ä–µ–¥–∞—Ç—å/gm, async (context: any) => {
        // !cmd increment gold 19319319
        //   0    1         2     3
        if (context.forwards[0].senderId && root == context.senderId && context.text.split(' ').length == 3 && context.peerType == 'chat') {
            const user_from: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const user_to: User | null = await prisma.user.findFirst({ where: { idvk: context.forwards[0].senderId } })
            if ( !user_from && !user_to) { return }
            const [cmd, value, action] = context.text.split(' ');
            const operation_list = ['—à–µ–∫–µ–ª–µ–π', '—à–µ–∫–µ–ª–∏', '—à–µ–∫–µ–ª—å']
            if (operation_list.includes(action) && parseFloat(value) > 0 && user_from && user_to && parseFloat(value) <= user_from.gold) {
                let analyzer_from: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user_from.id } })
                if (!analyzer_from) { analyzer_from = await prisma.analyzer.create({ data: { id_user: user_from.id } }) }
                let analyzer_to: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user_to.id } })
                if (!analyzer_to) { analyzer_to = await prisma.analyzer.create({ data: { id_user: user_to.id } }) }
                await prisma.$transaction([
                    prisma.user.update({ where: { id: user_from.id }, data: { gold: { decrement: parseFloat(value)}} }),
                    prisma.user.update({ where: { id: user_to.id }, data: { gold: { increment: parseFloat(value)}} }),
                    prisma.analyzer.update({ where: { id: analyzer_from.id }, data: { gold_to: { increment: parseFloat(value) } } }),
                    prisma.analyzer.update({ where: { id: analyzer_to.id }, data: { gold_from: { increment: parseFloat(value) } } })
                ]).then(([user_froms, user_tos]) => {
                    console.log(`üí∞ ${cmd} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —à–µ–∫–µ–ª–µ–π –≤ —Å—É–º–º–µ ${parseFloat(value)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç ${user_froms.name} –∫ ${user_tos.name}`);
                    context.send(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —à–µ–∫–µ–ª–µ–π –≤ —Å—É–º–º–µ ${parseFloat(value)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç ${user_froms.name} –∫ ${user_tos.name}K`)
                    vk.api.messages.send({ peer_id: user_tos.idvk, random_id: 0, message: `üí∞ –í–∞—à —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è —Å ${user_to.gold.toFixed(2)} –¥–æ ${user_tos.gold.toFixed(2)}, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å @id${user_from.idvk}(${user_from.name})` })
                    vk.api.messages.send({ peer_id: user_froms.idvk, random_id: 0, message: `üí∞ –í–∞—à —Å—á–µ—Ç —É–º–µ–Ω—à–∏–ª—å—Å—è —Å ${user_from.gold.toFixed(2)} –¥–æ ${user_froms.gold.toFixed(2)}, –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∫ @id${user_to.idvk}(${user_to.name})` })
                })
                .catch((error) => {
                    context.send(`üí∞ –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —à–µ–∫–µ–ª–µ–π...`)
                    console.error(`–û—à–∏–±–∫–∞ ${cmd} : ${error.message}`);
                });
            } else {
                await context.send(`–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É ${user_from?.gold.toFixed(2)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${(value-user_from!.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!`)
            }
        }
    })
}