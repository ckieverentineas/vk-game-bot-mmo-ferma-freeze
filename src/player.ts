import { HearManager } from "@vk-io/hear";
import { answerTimeLimit, chat_id, group_id, root, vk } from "./index";
import { IQuestionMessageContext } from "vk-io-question";
import prisma from "./module/prisma";
import { Analyzer, Corporation, User } from "@prisma/client";
import { Keyboard } from "vk-io";
import { version_soft } from "./module/game/datacenter/system";
import { Send_Message } from "./module/game/account/service";
import { icotransl_list } from "./module/game/datacenter/resources_translator";


export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (context.senderId == root[0]) {
            await context.sendDocuments({ value: `./prisma/dev.db`, filename: `dev.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
            await vk.api.messages.send({
                peer_id: Number(root[0]),
                random_id: 0,
                message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`
            })
        }
    })
    hearManager.hear(/—Å—Ç–∞—Ç–∞|–°—Ç–∞—Ç–∞/gm, async (context: any) => {
        let stop = false
        while (!stop) {
            const answer: any = await context.question(`‚ùÑ –ö–∞–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–º –Ω—É–∂–Ω–∞? –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø—è—Ç–∏ –º–∏–Ω—É—Ç!`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '‚ö°', payload: { command: 'energy' }, color: 'secondary' })
                .textButton({ label: 'üí∞', payload: { command: 'gold' }, color: 'secondary' })
                .textButton({ label: '‚≠ê', payload: { command: 'point' }, color: 'secondary' })
                .textButton({ label: '‚öô', payload: { command: 'global' }, color: 'secondary' })
                .textButton({ label: 'üåê', payload: { command: 'corp' }, color: 'secondary' }).row()
                .textButton({ label: '–û–ö', payload: { command: 'stop' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            })
            try {
                if (answer.isTimeout) { stop = true }
                if (!answer.payload) {
                    stop = true
                }
                const config: any = {
                    'energy': Stat_Energy,
                    'gold': Stat_Gold,
                    'point': Stat_Point,
                    'global': Stat_Global,
                    'corp': Stat_Corp,
                    'stop': Stat_Stop
                }
                let ans = await config[answer.payload.command]()
                if (ans == 'stop') { stop = true; ans = `–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞` }
                await context.send(`${ans}`)
            } catch (e) {
                console.log(e)
                return
            }
        }
        async function Stat_Global() {
            const player = await prisma.user.count()
            const builder = await prisma.builder.count()
            const corporation = await prisma.corporation.count()
            const worker = await prisma.worker.count()
            return `‚ùÑ FERma v ${version_soft}:\n\nüë§ –ò–≥—Ä–æ–∫–æ–≤: ${player}\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–π: ${corporation}\nüèõ –ó–¥–∞–Ω–∏–π: ${builder}\nüë• –†–∞–±–æ—á–∏—Ö: ${worker}`
        }
        async function Stat_Stop() {
            return `stop`
        }
        async function Stat_Energy() {
            let users = '‚ùÑ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–æ–±—ã—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏:\n\n'
            let counter = 1
            for (const user of await prisma.analyzer.findMany({ orderBy: { energy: 'desc' }, include: { user: true } })) {
                if (counter <= 10) {
                    users += `${user.user.idvk == context.senderId ? '‚úÖ' : 'üë§'} ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.energy.toFixed(2)}‚ö°\n`
                } else {
                    if (user.user.idvk == context.senderId) {
                        users += `\n‚úÖ ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.energy.toFixed(2)}‚ö°`
                    }
                }
                counter++
            }
            return `${users}`
        }
        async function Stat_Gold() {
            let users = '‚ùÑ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–æ–±—ã—Ç—ã–º —à–µ–∫–µ–ª—è–º:\n\n'
            let counter = 1
            for (const user of await prisma.analyzer.findMany({ orderBy: { gold: 'desc' }, include: { user: true } })) {
                if (counter <= 10) {
                    users += `${user.user.idvk == context.senderId ? '‚úÖ' : 'üë§'} ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.gold.toFixed(2)}üí∞\n`
                } else {
                    if (user.user.idvk == context.senderId) {
                        users += `\n‚úÖ ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.gold.toFixed(2)}üí∞`
                    }
                }
                counter++
            }
            return `${users}`
        }
		async function Stat_Point() {
            let users = '‚ùÑ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –æ—á–∫–∞–º –æ–±—É—á–µ–Ω–∏—è:\n\n'
            let counter = 1
            for (const user of await prisma.analyzer.findMany({ orderBy: { point: 'desc' }, include: { user: true } })) {
                if (counter <= 10) {
                    users += `${user.user.idvk == context.senderId ? '‚úÖ' : 'üë§'} ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.point}‚≠ê\n`
                } else {
                    if (user.user.idvk == context.senderId) {
                        users += `\n‚úÖ ${counter} - [https://vk.com/id${user.user.idvk}|${user.user.name.slice(0, 20)}] --> ${user.point}‚≠ê`
                    }
                }
                counter++
            }
            return `${users}`
        }
        async function Stat_Corp() {
            const corps = []
            let event_logger = '‚ùÑ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è–º:\n\n'
            for (const corp of await prisma.corporation.findMany({ orderBy: { crdate: 'asc' } })) {
                const users_counter = await prisma.user.count({ where: { id_corporation: corp.id } })
                if (users_counter > 0) {
                    const lvls = await prisma.corporation_Builder.findMany({ where: { id_corporation: corp.id } })
                    const lvls_sum = lvls.map(builder => `üèõ ${builder.name} --> ${builder.lvl}üìà\n`).join('')
                    const score: number = lvls.reduce((x,y) => x + y.lvl, 0)
                    corps.push({ id: corp.id, name: corp.name, members: `${users_counter}/${corp.member}üë•`, builders: lvls_sum, score: score })
                }
            }
            corps.sort(function(a, b){
                return b.score - a.score;
            });
            let counter = 1
            let corp_me = ''
            const user = await prisma.user.findFirst({ where: { idvk: context.senderId}})
            for (const cor of corps) {
                if ( counter < 10) {
                    event_logger += `${cor.id == user?.id_corporation ? '‚úÖ' : 'üåê'} ${counter} - ${cor.name} ${cor.members}\n ${cor.builders}\n\n`
                } else {
                    if (cor.id == user?.id_corporation) {
                        corp_me = `‚úÖ ${counter} - ${cor.name} ${cor.members}\n ${cor.builders}\n\n`
                    }
                }
                
                counter++
            }
            event_logger += `\n\n\n\n\n\n${corp_me}`
            return `${event_logger}`
        }
        
        /*const text = [
            { idvk: 1, id: 1, text: "–ì", white: " " },
            { idvk: 12, id: 1, text: "–ì–ò", white: " " },
            { idvk: 123, id: 1, text: "–ì–ò–õ", white: " " },
            { idvk: 1234, id: 1, text: "–ì–ò–õ–¨", white: " " },
            { idvk: 12345, id: 1, text: "–ì–ò–õ–¨–î", white: " " },
            { idvk: 123456, id: 1, text: "–ì–ò–õ–¨–î–ò", white: " " },
            { idvk: 1234567, id: 1, text: "–ì–ò–õ–¨–î–ò–Ø", white: " " }
        ]
        let res = []
        //const speca = ["·Ö†", " ", " ", "„ÄÄ", " ", " ", "", "‚ÄÉ"]
        const speca = ["„Ö§"]
        for (const j in speca) {
            for (const i in text) {
                const calc = text[i].text.length < 8 ? 8-text[i].text.length : 0
                const data = `${i}.${(text[i].text).slice(-8)}${text[i].white.repeat(calc)+text[i].white.repeat(3)}${String(text[i].idvk)}üéñ`
                res.push({ test: data.replace(/ /g, `${speca[j]}`)})
            }
            res.push({ test: speca[j] })
        }
        await context.send(res.map((item: { test: any; }) => {return item.test;}).join("\r\n"))
        //console.log(res.map((item: { test: any; }) => {return item.test;}).join("\r\n"))*/
        
    })
    hearManager.hear(/–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–û—Å–º–æ—Ç—Ä–µ—Ç—å/gm, async (context: any) => {
        if (context.forwards[0]?.senderId || context.replyMessage?.senderId) {
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            const user = await prisma.user.findFirst({ where: { idvk: target } })
            if (user) {
                const corp: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
                await context.send(`üí¨ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –±–∏–∑–Ω–µ—Å, ${user.name}:\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : corp?.name}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}`)
            }
        }
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/–ø–æ–º–æ—â—å|–ü–æ–º–æ—â—å/gm, async (context: any) => {
        await context.send(`üí¨ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n~ [–æ—Å–º–æ—Ç—Ä–µ—Ç—å] -> –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ\n~ [–ø–µ—Ä–µ–¥–∞—Ç—å —Ö —à–µ–∫–µ–ª–µ–π] -> –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–µ—Å–µ–¥—ã, –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É —à–µ–∫–µ–ª–∏, –≥–¥–µ —Ö - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–∫–µ–ª–µ–π, —á—Ç–æ —Å–ø–∏—à—É—Ç—Å—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞\n~ [—Å—Ç–∞—Ç–∞] -> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ –ø–æ –¥–æ–±—ã—á–µ —ç–Ω–µ—Ä–≥–∏–∏`)
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/!cmd/gm, async (context: any) => {
        // !cmd increment gold 19319319
        //   0    1         2     3
        if ((context.forwards[0]?.senderId || context.replyMessage?.senderId) && root.includes(String(context.senderId)) && context.text.split(' ').length == 4) {
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            if (!target) { return }
            const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
            const [cmd, action, field, value] = context.text.split(' ');
            const operation_list = ['increment', 'decrement']
            const target_list = ['gold', 'energy', 'iron']
            let updateData: any = {};
            if (operation_list.includes(action) && target_list.includes(field) && parseFloat(value) > 0) {
                if (action === "increment") {
                    updateData[field] = {
                      increment: parseFloat(value),
                    };
                  } else {
                    updateData[field] = {
                      decrement: parseFloat(value),
                    };
                  }
                await prisma.$transaction([
                    prisma.user.update({ where: { id: user?.id }, data: updateData })
                ]).then(([user_update]) => {
                    console.log(`üîß ${cmd} ${field} ${action} ${value} for ${user_update.idvk}`);
                    context.send(`üîß ${cmd} ${field} ${action} ${value} OK`)
                    vk.api.messages.send({ peer_id: user_update.idvk, random_id: 0, message: `üîß ${cmd} ${field} ${action} ${value}` })
                })
                .catch((error) => {
                    context.send(`üîß ${cmd} ${field} ${action} ${value} error`)
                    console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                });
            } else {
                await context.send(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∫–æ–º–∏–ª—è—Ç–æ—Ä –≤–ª–æ–º –ø–∏—Å–∞—Ç—å`)
            }
        }
    })
    hearManager.hear(/!cmall/gm, async (context: any) => {
        // !cmd increment gold 19319319
        //   0    1         2     3
        if (context.senderId == 200840769 && context.text.split(' ').length == 4) {
            const [cmd, action, field, value] = context.text.split(' ');
            const operation_list = ['increment', 'decrement']
            const target_list = ['gold', 'energy', 'iron', 'crystal']
            let updateData: any = {};
            if (operation_list.includes(action) && target_list.includes(field) && parseInt(value) > 0) {
                if (action === "increment") {
                    updateData[field] = {
                      increment: parseFloat(value),
                    };
                  } else {
                    updateData[field] = {
                      decrement: parseFloat(value),
                    };
                }
                let couinter = 0
                const users_c = await prisma.user.count({})
                await context.send(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${users_c} –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ${icotransl_list[field].name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${value}${icotransl_list[field].smile}`)
                for (const us of await prisma.user.findMany({})) {
                    const res = await prisma.user.update({ where: { id: us.id }, data: updateData })
                    if (res) {
                        console.log(`–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã ${icotransl_list[field].name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${value}${icotransl_list[field].smile} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏`)
                        await Send_Message(us.idvk, `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã ${icotransl_list[field].name} –≤ —Ä–∞–∑–º–µ—Ä–µ ${value}${icotransl_list[field].smile} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏`)
                        couinter++
                    } else  {
                        console.log(`—á—Ç–æ—Ç–æ –Ω–µ —Ç–∞–∫ —Å –º–∞—Å—Å–æ–≤—ã–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º ${cmd}`)
                    }
                }
                await context.send(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${couinter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ ${users_c}`)
            } else {
                await context.send(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∫–æ–º–∏–ª—è—Ç–æ—Ä –≤–ª–æ–º –ø–∏—Å–∞—Ç—å`)
            }
        }
    })
    hearManager.hear(/!–±–∞–Ω/, async (context) => {
        if (context.isOutbox == false && root.includes(String(context.senderId)) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { id: user.id }, data: { status: "banned" } })
                    await context.send(`OK`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚ò† –î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`})
                    await vk.api.messages.send({ peer_id: login.idvk, random_id: 0, message: `‚ò† @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://vk.com/fermatex`})
                    console.log(`–î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!—Ä–∞–∑–±–∞–Ω/, async (context) => {
        if (context.isOutbox == false && root.includes(String(context.senderId)) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { id: user.id }, data: { status: "player" } })
                    await context.send(`OK`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚úÖ –î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!`})
                    await vk.api.messages.send({ peer_id: login.idvk, random_id: 0, message: `‚úÖ @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!`})
                    console.log(`–î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!–º–∏–≥—Ä–∏—Ä—É–µ–º/, async (context) => {
        if (context.isOutbox == false && root.includes(String(context.senderId)) && context.text) {
            const countbul = await prisma.builder.count({})
            await context.send(`–ó–∞–ø—É—Å–∫ —Å–Ω–æ—Å–∞ ${countbul} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫`)
            for (const user of await prisma.user.findMany({})) {
                let sum = 0
                let count = 0
                for (const build of await prisma.builder.findMany({ where: { id_user: user.id } })) {
                    sum += build.cost
                    await prisma.builder.delete({ where: { id: build.id } })
                    count++
                }
                await prisma.user.update({ where: { id: user.id }, data: { gold: { increment: sum } } })
                await Send_Message(user.idvk, `–î–ª—è —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Å–Ω–µ—Å—Ç–∏ –≤–∞–º ${count} –∑–¥–∞–Ω–∏–π, –≤–∞–º –Ω–∞ —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${sum} —à–µ–∫–µ–ª–µ–π`)
                await Send_Message(chat_id, `–î–ª—è —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Å–Ω–µ—Å—Ç–∏ [https://vk.com/id${user.idvk}|${user.name.slice(0, 20)}] ${count} –∑–¥–∞–Ω–∏–π, –µ–º—É/–µ–π –Ω–∞ —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${sum} —à–µ–∫–µ–ª–µ–π`)
            }
            const countbul2 = await prisma.builder.count({})
            await context.send(`–°–µ–π—á–∞—Å –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${countbul2}, –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`)
        }
    })
    hearManager.hear(/–ø–µ—Ä–µ–¥–∞—Ç—å|–ü–µ—Ä–µ–¥–∞—Ç—å/gm, async (context: any) => {
        if ((context.forwards[0]?.senderId || context.replyMessage?.senderId) && context.text.split(' ').length == 3 && context.peerType == 'chat') {
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            if (!target) { return }
            const user_from: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const user_to: User | null = await prisma.user.findFirst({ where: { idvk: target } })
            if ( !user_from || !user_to) { await context.send(`–í—ã –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —à–µ–∫–µ–ª–µ–π –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`); return }
            if ( user_from?.idvk == user_to?.idvk) { await context.send(`–°–∞–º–æ–º—É —Å–µ–±–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å!`); return }
            const [cmd, value, action] = context.text.split(' ');
            const operation_list = ['—à–µ–∫–µ–ª–µ–π', '—à–µ–∫–µ–ª–∏', '—à–µ–∫–µ–ª—å', '—à–µ–∫–µ–ª—è']
            if (operation_list.includes(action) && parseFloat(value) > 0 && user_from && user_to && parseFloat(value) <= user_from.gold) {
                let analyzer_from: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user_from.id } })
                if (!analyzer_from) { analyzer_from = await prisma.analyzer.create({ data: { id_user: user_from.id } }) }
                let analyzer_to: Analyzer | null = await prisma.analyzer.findFirst({ where: { id_user: user_to.id } })
                if (!analyzer_to) { analyzer_to = await prisma.analyzer.create({ data: { id_user: user_to.id } }) }
                await prisma.$transaction([
                    prisma.user.update({ where: { id: user_from.id }, data: { gold: { decrement: parseFloat(value)}} }),
                    prisma.user.update({ where: { id: user_to.id }, data: { gold: { increment: parseFloat(value)}} }),
                    prisma.analyzer.update({ where: { id: analyzer_from.id }, data: { gold_to: { increment: parseFloat(value) } } }),
                    prisma.analyzer.update({ where: { id: analyzer_to.id }, data: { gold_from: { increment: parseFloat(value) } } })
                ]).then(([user_froms, user_tos]) => {
                    console.log(`üí∞ ${cmd} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —à–µ–∫–µ–ª–µ–π –≤ —Å—É–º–º–µ ${parseFloat(value)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç ${user_froms.name} –∫ ${user_tos.name}`);
                    context.send(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —à–µ–∫–µ–ª–µ–π –≤ —Å—É–º–º–µ ${parseFloat(value)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç ${user_froms.name} –∫ ${user_tos.name}`)
                    vk.api.messages.send({ peer_id: user_tos.idvk, random_id: 0, message: `üí∞ –í–∞—à —Å—á–µ—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è —Å ${user_to.gold.toFixed(2)} –¥–æ ${user_tos.gold.toFixed(2)}, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å @id${user_from.idvk}(${user_from.name})` })
                    vk.api.messages.send({ peer_id: user_froms.idvk, random_id: 0, message: `üí∞ –í–∞—à —Å—á–µ—Ç —É–º–µ–Ω—å—à–∏–ª—Å—è —Å ${user_from.gold.toFixed(2)} –¥–æ ${user_froms.gold.toFixed(2)}, –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∫ @id${user_to.idvk}(${user_to.name})` })
                })
                .catch((error) => {
                    context.send(`üí∞ –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —à–µ–∫–µ–ª–µ–π...`)
                    console.error(`–û—à–∏–±–∫–∞ ${cmd} : ${error.message}`);
                });
            } else {
                await context.send(`–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É ${user_from?.gold.toFixed(2)}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${(value-user_from!.gold).toFixed(2)} —à–µ–∫–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!`)
            }
        }
    })
    hearManager.hear(/–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é/gm, async (context: any) => {
        const user: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
        if (user) {
            const corporation_check: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user.id_corporation) } })
            if (corporation_check) {
                await context.send(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${corporation_check.name}`)
                return
            } else {
                const name_corp = context.text.replace('–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ', '')
                if (name_corp.length < 3 || name_corp.length >= 100 ) { await context.send(`–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤`); return }
                const name_check = await prisma.corporation.findFirst({ where: { name: name_corp } })
                if (name_check) { await context.send(`–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`); return }
                const corp = await prisma.corporation.create({ data: { name: name_corp, id_user: user.id }})
                if (corp) {
                    await prisma.user.update({ where: { id: user.id }, data: { id_corporation: corp.id}})
                    console.log(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}`);
                    await context.send(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}` })
                }
            }
        }
    })
    hearManager.hear(/!–≤—Å—Ç—É–ø–∏—Ç—å|!–í—Å—Ç—É–ø–∏—Ç—å/gm, async (context: any) => {
        if ((context.forwards[0]?.senderId || context.replyMessage?.senderId) /*&& context.peerType == 'chat'*/) {
            let event_logger = ''
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            if (!target) { return }
            const user_from: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const user_to: User | null = await prisma.user.findFirst({ where: { idvk: target } })
            if ( !user_from || !user_to) { await context.send(`–í—ã –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`); return }
            if ( user_from?.idvk == user_to?.idvk) { await context.send(`–ö —Å–∞–º–æ–º—É —Å–µ–±–µ –≤—Ç–æ—Ä–æ–π —Å–º—ã—Å–ª–∞ –≤—Å—Ç—É–ø–∞—Ç—å –Ω–µ—Ç!`); return }
            const corporation_check: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user_from.id_corporation) } })
            if (corporation_check) {
                await context.send(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${corporation_check.name}`)
                return
            } else {
                const corporation_check_to: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user_to.id_corporation) } })
                if (corporation_check_to && await prisma.user.count({ where: { id_corporation: user_to.id_corporation} }) < corporation_check_to.member ) {
                    await prisma.$transaction([
                        prisma.user.update({ where: { id: user_from.id }, data: { id_corporation: user_to.id_corporation } }),
                        prisma.user.findFirst({ where: { id: corporation_check_to.id_user } })
                    ]).then(([user_change_corp, owner]) => {
                        if (user_change_corp) {
                            event_logger += `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check_to.name}`
                            console.log(`${user_from.idvk} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check_to.name}`);
                            vk.api.messages.send({ peer_id: owner!.idvk, random_id: 0, message: `@id${user_from.idvk}(${user_from.name}) –≤—Å—Ç—É–ø–∞–µ—Ç –∫ –≤–∞–º –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é!` })
                        }
                    })
                    .catch((error) => {
                        event_logger += `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`
                        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                    });
                } else {
                    await context.send(`–í –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏!`)
                }
            }
            await context.send(`${event_logger}`)
        }
    })
    hearManager.hear(/!–±–æ—Å—Å|!–ë–æ—Å—Å/gm, async (context: any) => {
        console.log(context)
        const test = await vk.api.wall.post({ owner_id: -group_id, message: "test boss"})
        console.log(test)
    })
}